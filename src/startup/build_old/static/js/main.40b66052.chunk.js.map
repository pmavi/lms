{"version":3,"sources":["fhg/hooks/useProgress.js","fhg/components/ErrorStateSnackbar.js","fhg/security/PrivilegeRoute.js","pages/Main.js","fhg/components/Typography.js","fhg/utils/Utils.js","fhg/components/Grid.js","fhg/components/Loading.js","fhg/components/security/AuthenticatedUser.js","fhg/hooks/data/useMutationFHG.js","Constants.js","data/FragmentsGL.js","data/QueriesGL.js","fhg/hooks/useMessage.js","components/ThemeProvider.js","fhg/components/ProgressIndicator.js","fhg/hooks/data/useLazyQueryFHG.js","fhg/components/ErrorSnackbar.js","components/ErrorBoundary.js","fhg/components/security/Authenticator.js","aws-exports.js","components/theme/authenticatorTheme.js","App.js","reportWebVitals.js","index.js"],"names":["progressState","atom","key","default","progressGlobal","progressList","useProgress","uniqueId","useRecoilState","progressValue","setProgressState","setProgress","useCallback","progress","indexOf","newProgress","push","length","list","without","useMemo","useStyles","makeStyles","theme","errorMessage","backgroundColor","palette","error","light","paddingRight","spacing","closeButtonStyle","position","right","top","marginLeft","zIndex","name","ErrorSnackbar","classes","useState","open","setOpen","errorStateValue","useRecoilValue","errorState","errorKey","values","enableRefresh","errorInfo","useEffect","Snackbar","anchorOrigin","vertical","horizontal","ContentProps","root","message","Typography","id","color","style","whiteSpace","toString","componentStack","action","Button","size","onClick","window","location","reload","IconButton","aria-label","className","event","PrivilegeRoute","hasPrivilege","children","rest","to","AdminMain","lazy","ClientMain","WebAppBarLF","userRoleState","isClient","isAdmin","undefined","Main","userRole","authDataState","authenticationDataStatus","clientId","setClientId","history","useHistory","routeMatch","useRouteMatch","path","CLIENT_ENTITY_DASHBOARD_PATH","strict","sensitive","useLazyQueryFHG","USER_CLIENT_QUERY","loadData","data","params","localStorage","entityId","defaultPath","LOAN_ANALYSIS_PATH","replace","cognitoSub","variables","user","users","ADMIN_PATH","fallback","Loading","isLoading","StylesProvider","utils","MomentUtils","CssBaseline","ProgressIndicator","isGlobal","CLIENT_DASHBOARD_PATH","ADMIN_SETUP_PATH","height","APPBAR_HEIGHT","DEFAULT_PATH","render","TypographyFHG","type","hasBold","intlProps","hasLineBreaks","otherProps","linesToParagraphs","nodes","map","node","split","text","reduce","concat","b","chunks","defaultMessage","container","alignItems","resizable","justify","item","defaultProps","variant","displayName","formatMessage","intl","newDefaultMessage","removeOne","array","index","len","hasValue","isNil","isArray","isObjectLike","Object","keys","getBase64FromUrl","url","a","fetch","blob","Promise","resolve","reader","FileReader","readAsDataURL","onloadend","base64data","result","editChange","value","reason","nextValue","isComponent","newValue","componentName","target","valueAsNumber","checked","date","toNumber","get","console","log","renderOptionsKey","option","inputValue","useOption","matches","match","parts","parse","part","fontWeight","highlight","convertImageToWrapper","fileUpload","isAllowBlank","_toNumber","toNumberIfString","isNaN","resultOf","argument","defaultItem","stringAvatar","width","marginRight","findById","idList","arrayElement","downloadBlob","filename","URL","createObjectURL","document","createElement","href","download","addEventListener","clickHandler","setTimeout","revokeObjectURL","removeEventListener","click","humanFileSize","bytes","si","dp","thresh","Math","abs","units","u","r","round","toFixed","getExtension","lastIndex","lastIndexOf","substring","getExtensionIcon","extension","escapeRegExp","string","gridStyle","props","overflow","fullHeight","fullWidth","flex","innerGridStyle","Grid","forwardRef","ref","resizeable","alignContent","isScrollable","isAddScrollPadding","innerStyle","direction","wrap","adjustedProps","inner","useTheme","mainRef","useRef","isVerticalScroll","setIsVerticalScroll","checkIsScrolling","current","isVerticalScrolling","scrollHeight","clientHeight","handleResizeDebounced","debounce","padding","backdropStyle","opacity","progressStyle","left","hasBackdrop","classesProp","progressProps","userGroupsState","groups","signOut","userStatus","AuthenticatedUser","authState","setUserGroups","useSetRecoilState","setUserRole","authStateData","setAuthStateData","isInitialized","setIsInitialized","signInUserSession","idToken","payload","ADMIN_GROUP","username","attributes","sub","CREATE_UPDATE_ACTION","DELETE_ACTION","SORT_ACTION","UNDELETE_ACTION","useMutationFHG","mutation","options","showLoading","theUniqueId","useIntl","setErrorState","lastMessage","setLastMessage","useMutation","mutationFunction","loading","typeKey","actionKey","DATE_FORMAT_KEYBOARD","MONTH_FORMAT","MONTH_ONLY_FORMAT","YEAR_FORMAT","DATE_TIME_FORMAT","DATE_MEDIUM_FORMAT","DATE_DB_FORMAT","CURRENCY_FORMAT","CURRENCY_FULL_FORMAT","PERCENT_FORMAT","DAYS_TO_DISPLAY_COMPLETED_TASKS","MONTHS","MONTHS_CONVERT","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","annual","ERROR_COLOR","WARNING_COLOR","SUCCESS_COLOR","PRIMARY_COLOR","LOCK_ICON","LOGO_MEDIUM","LOGO","METRICS_LOGO","ENDPOINT","process","APPBAR_SMALL_HEIGHT","DRAWER_WIDTH","EDIT_DRAWER_WIDTH","ADMIN_DRAWER","FILE_MIME_TYPES","BUCKET_NAME","FILE_BUCKET","UNDO_DURATION","ROOT_ID","PASSIVE_ROOT_ID","ACTIVE_ROOT_ID","CLIENT_EDIT","ENTITY_EDIT","USER_EDIT","TASK_EDIT","ASSET_EDIT","LIABILITY_EDIT","SEAT_EDIT","ACCOUNTABILITY_CLIENT_ENTITY_PATH","CLIENT_ENTITY_PATH","ENTITY_ASSET_PATH","LIABILITIES_PATH","LMS_DASHBOARD_PATH","LMS_SEARCH_PATH","BALANCE_SHEET_PATH","CASH_FLOW_PATH","FILES_PATH","LOAN_AMORTIZATION_PATH","CLIENT_TASK_NOTES_PATH","ADMIN_USER_PATH","ADMIN_USERS_PATH","ADMIN_COURSES_PATH","ADMIN_COURSE_PATH","CLIENT_FRAGMENT","gql","USER_FRAGMENT","COURSE_FRAGMENT","MODULES_FRAGMENT","UNITS_FRAGMENT","RESOURCES_FRAGMENT","TASK_FRAGMENT","TASK_HISTORY_FRAGMENT","ENTITY_FRAGMENT","FILE_FRAGMENT","ASSET_FRAGMENT","UNIT_TYPE_FRAGMENT","LIABILITY_FRAGMENT","INCOME_FRAGMENT","INCOME_TYPE_FRAGMENT","EXPENSE_FRAGMENT","EXPENSE_TYPE_FRAGMENT","BALANCE_REPORT_FRAGMENT","LOAN_ANALYSIS_FRAGMENT","CASH_FLOW_SEGMENT_FRAGMENT","CASH_FLOW_INCOME_EXPENSE_INFO","CASH_FLOW_FRAGMENT","ENTITY_CASH_FLOW_FRAGMENT","SEAT_FRAGMENT","CITY_STATE_QUERY","getCityCacheQueries","query","queryPath","CITY_CREATE_UPDATE","CLIENT_ALL_QUERY","CLIENT_BY_ID_QUERY","getClientCacheQueries","CLIENT_CREATE_UPDATE","CLIENT_DELETE","USER_CREATE_UPDATE","USER_DELETE","USER_ADMIN_QUERY","getUserCacheQueries","COURSE_QUERY_WHERE","COURSE_ALL_QUERY_WHERE","COURSE_ALL_QUERY_WHERE_ID","getCourseCacheQueries","active","COURSE_CREATE_UPDATE","COURSE_DELETE","MARK_AS_READ_CREATE","MARK_AS_READ_DELETE","MODULES_QUERY_WHERE","getModelCacheQueries","course_id","isDeleted","MODULE_QUERY","MODULES_CREATE_UPDATE","MODULE_DELETE","UNITS_QUERY_WHERE","getUnitCacheQueries","module_id","UNIT_RESOURCES_QUERY","getUnitAllCacheQueries","UNIT_CREATE_UPDATE","UNIT_DELETE","UNIT_VIDEO_DELETE","UNIT_SORT","RESOURCES_QUERY_WHERE","getResourcesCacheQueries","unit_id","RESOURCES_DELETE","RESOURCES_EDIT","TASK_CREATE_UPDATE","TASK_CLIENT_QUERY","TASK_QUERY","TASK_DELETE","TASK_CURRENT_QUERY","getTaskCacheQueries","taskId","queries","completedDays","TASK_HISTORY_TASK_QUERY","TASK_HISTORY_DELETE","getTaskHistoryCacheQueries","completionDateTime","ENTITY_CREATE_UPDATE","ENTITY_DELETE","ENTITY_CLIENT_QUERY","ENTITY_BY_ID_QUERY","getEntityCacheQueries","FILE_CREATE","FILE_DELETE","FILE_ENTITY_QUERY","getFileCacheQueries","tag","ASSETS_ENTITY_QUERY","ASSET_QUERY","getAssetRefetchQueries","assetId","historyDate","BALANCE_SHEET_QUERY","ASSET_CREATE_UPDATE","ASSET_DELETE","ASSET_CATEGORY_QUERY","UNIT_TYPE_QUERY","UNIT_TYPE_CREATE_UPDATE","getUnitTypeCacheQueries","LIABILITIES_ENTITY_QUERY","LIABILITY_QUERY","getLiabilityRefetchQueries","liabilityId","LIABILITY_TYPE_QUERY","BANK_QUERY","LIABILITY_CREATE_UPDATE","LIABILITY_DELETE","LIABILITY_CATEGORY_QUERY","INCOME_CREATE_UPDATE","INCOME_DELETE","getIncomeUpdateQueries","INCOME_TYPE_CREATE_UPDATE","INCOME_TYPE_DELETE","INCOME_TYPE_UNDELETE","getIncomeTypeUpdateQueries","EXPENSE_CREATE_UPDATE","EXPENSE_DELETE","EXPENSE_TYPE_CREATE_UPDATE","EXPENSE_TYPE_DELETE","EXPENSE_TYPE_UNDELETE","getExpenseUpdateQueries","getExpenseTypeUpdateQueries","LOAN_ANALYSIS_QUERY","CASH_FLOW_QUERY","ENTITY_CASH_FLOW_ALL_WHERE_QUERY","ENTITY_CASH_FLOW_CREATE_UPDATE","getCashFlowReportRefetchQueries","year","SEAT_ALL_WHERE_QUERY","SEAT_BY_ID_QUERY","SEAT_DELETE","SEAT_CREATE_UPDATE","getSeatCacheQueries","useMessage","propTypes","PropTypes","isRequired","ThemeProvider","React","materialTheme","overrides","MuiButton","textSizeLarge","fontSize","primary","main","dark","secondary","background","table","header","warning","success","typography","fontFamily","subtitle1","button","textTransform","shape","borderRadius","responsiveFontSizes","createMuiTheme","useGlobal","useLazyQuery","queryFunction","resolveRef","called","stackTrace","context","onClose","messageKey","outline","outlineColor","ErrorBoundary","handleClose","setState","state","this","Component","I18n","putVocabulariesForLanguage","Username","Password","defaultComponents","Header","tokens","View","textAlign","space","large","Image","alt","src","small","Heading","xl","level","Footer","Text","colors","neutral","AuthenticatorFHG","components","Authenticator","awsmobile","authenticatorTheme","font","_hover","_focus","_active","frameStyle","config","awsconfig","Amplify","configure","Storage","bucket","region","customPrefix","public","protected","private","Analytics","disabled","formats","number","USD","currency","App","messages","setMessages","then","locale","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","retryLink","RetryLink","authLink","setContext","_","headers","Auth","currentSession","session","accessToken","jwtToken","catch","token","accesstoken","client","ApolloClient","link","ApolloLink","from","HttpLink","uri","cache","InMemoryCache","String","prototype","format","ReactDOM","DndProvider","backend","HTML5Backend","ApolloProvider","getElementById"],"mappings":"6RAKaA,EAAgBC,YAAK,CAC/BC,IAAK,gBACLC,SAAS,IAECC,EAAiBH,YAAK,CAChCC,IAAK,iBACLC,SAAS,IAGRE,EAAe,GAKJ,SAASC,EAAYC,GAAW,IAAD,EAEDC,YAAeR,GAFd,mBAEpCS,EAFoC,KAErBC,EAFqB,KAIrCC,EAAcC,uBAAY,SAACC,GAAc,IAAD,EAC3C,GAAIA,GACD,GAAIR,EAAaS,QAAQP,GAAY,EAAI,CACtC,IAAMQ,EAAcV,EAAaW,KAAKT,GAAY,EAClDG,EAAiBK,SAEhB,IAAgB,QAAZ,EAAAV,SAAA,eAAcY,QAAS,EAAG,CAAC,IAAD,EAC5BC,EAAOC,IAAQd,EAAcE,GACnC,IAAgB,QAAZ,EAAAF,SAAA,eAAcY,UAAWC,EAAKD,OAAQ,CACvC,IAAMF,EAAcG,EAAKD,OAAS,EAClCZ,EAAea,EACfR,EAAiBK,OAGvB,CAACL,EAAkBH,IAEtB,OAAOa,mBAAQ,iBAAM,CAACX,EAAeE,KAAc,CAACA,EAAaF,M,+TC5B9DY,EAAYC,KACf,SAACC,GAAD,MAAY,CACTC,aAAc,CACXC,gBAAgB,GAAD,OAAKF,EAAMG,QAAQC,MAAMC,MAAzB,eACfC,aAAcN,EAAMO,QAAQ,IAE/BC,iBAAkB,CACfC,SAAU,WACVC,MAAO,EACPC,IAAK,EACLC,WAAY,OACZC,OAAQ,SAGd,CAACC,KAAM,wBA+BK,SAASC,IACrB,IAAMC,EAAUlB,IADqB,EAEbmB,oBAAS,GAFI,mBAE9BC,EAF8B,KAExBC,EAFwB,KAI/BC,EAAkBC,YAAeC,GAChClB,EAAmEgB,EAAnEhB,MAAOmB,EAA4DH,EAA5DG,SAAUtB,EAAkDmB,EAAlDnB,aAAcuB,EAAoCJ,EAApCI,OAAQC,EAA4BL,EAA5BK,cAAeC,EAAaN,EAAbM,UAE7DC,qBAAU,WACHP,IAAoBhB,GAASmB,IAC9BJ,GAAQ,KAEX,CAACC,EAAiBhB,IAarB,OACG,cAACwB,EAAA,EAAD,CACGV,KAAMA,EACNW,aAAc,CAACC,SAAU,MAAOC,WAAY,UAC5CC,aAAc,CACX,mBAAoB,aACpBhB,QAAS,CACNiB,KAAMjB,EAAQf,eAGpBiC,QACG,qCACG,cAACC,EAAA,EAAD,CAAYC,GAAIb,EAAUC,OAAQA,EAAQa,MAAO,UAAjD,SACIpC,KAEFG,GAASsB,IACR,0BAASY,MAAO,CAACC,WAAY,YAA7B,iBACInC,QADJ,IACIA,OADJ,EACIA,EAAOoC,WACR,uBAFH,OAGId,QAHJ,IAGIA,OAHJ,EAGIA,EAAWe,qBAKxBC,OAAQ,CACLjB,GACG,cAACkB,EAAA,EAAD,CAAmBN,MAAM,UAAUO,KAAK,QAAQC,QAlCtC,WACnBC,OAAOC,SAASC,UAiCP,SACG,cAACb,EAAA,EAAD,CAAYE,MAAM,UAAUD,GAAG,UAA/B,sBADS,QAMf,cAACa,EAAA,EAAD,CAEGC,aAAW,QACXb,MAAM,UACNc,UAAWnC,EAAQR,iBACnBqC,QAzCQ,SAACO,GAClBjC,GAAQ,IAmCF,SAOG,cAAC,IAAD,KANI,Y,sCCpGJ,SAASkC,EAAT,GAA4D,IAAnCC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,SAAaC,EAAO,2CACvE,OAAIF,EACM,cAAC,IAAD,2BAAWE,GAAX,aAAkBD,KAErB,cAAC,IAAD,CAAUE,GAAG,MCYvB,IAAMC,EAAYC,gBAAK,kBAAM,wEACvBC,EAAaD,gBAAK,kBAAM,6EACxBE,EAAcF,gBAAK,kBAAM,yDAElBG,EAAgBpF,YAAK,CAC/BC,IAAK,WACLC,QAAS,CAACmF,UAAU,EAAOC,SAAS,KAG1B1C,EAAa5C,YAAK,CAC5BC,IAAK,QACLC,QAAS,CACN2C,cAAU0C,EACVhE,kBAAcgE,EACdvC,eAAWuC,EACX7D,WAAO6D,EACPzC,YAAQyC,EACRxC,eAAe,KASN,SAASyC,IAAQ,IAAD,EACtBC,EAAW9C,YAAeyC,GAC1BM,EAAgB/C,YAAegD,KAFT,EAGIpD,qBAHJ,mBAGrBqD,EAHqB,KAGXC,EAHW,KAItBC,EAAUC,cACVC,EAAaC,YAAc,CAACC,KAAMC,IAA8BC,QAAQ,EAAOC,WAAW,IALpE,EAODC,YAAgBC,UAAmBhB,EAAW,aAP7C,mBAOrBiB,EAPqB,KAOVC,EAPU,KAOVA,KAEXnB,EAAqBG,EAArBH,QAASD,EAAYI,EAAZJ,SA0BhB,GAxBApC,qBAAU,WAAO,IAAD,IACb,IAAKqC,GAAWM,IAAZ,OAAwBI,QAAxB,IAAwBA,GAAxB,UAAwBA,EAAYU,cAApC,aAAwB,EAAoBd,WAAYA,KAAQ,OAAKI,QAAL,IAAKA,GAAL,UAAKA,EAAYU,cAAjB,aAAK,EAAoBd,UAAU,CACpGe,aAAaC,SAAW,IACxB,IAAIC,EAAcC,IAAmBC,QAAQ,YAAanB,GAAUmB,QACjE,YACAJ,aAAaC,UAEhBd,EAAQiB,QAAQF,MAEnB,CAACjB,EAAUE,EAASR,EAApB,OAA6BU,QAA7B,IAA6BA,GAA7B,UAA6BA,EAAYU,cAAzC,aAA6B,EAAoBd,WAEpD3C,qBAAU,YACU,OAAbyC,QAAa,IAAbA,OAAA,EAAAA,EAAesB,aAAc3B,GAC9BmB,EAAS,CAACS,UAAW,CAACD,WAAYtB,EAAcsB,gBAEnD,CAACtB,EAAeL,EAAUmB,IAE7BvD,qBAAU,WACP,GAAIwD,EAAM,CAAC,IAAD,EACDS,GAAW,OAAJT,QAAI,IAAJA,GAAA,UAAAA,EAAMU,aAAN,eAAc,KAAM,GACjCtB,EAAYqB,EAAKtB,aAEpB,CAACa,IAEAnB,GAAYD,GAAYO,EAAW,CACpC,IAAIiB,EAAcvB,EACb8B,IACAN,IAAmBC,QAAQ,YAAanB,GAAUmB,QAAQ,YAAaJ,aAAaC,UAEzF,OACG,cAAC,WAAD,CAAUS,SAAU,cAACC,EAAA,EAAD,CAASC,WAAS,IAAtC,SACG,cAACC,EAAA,EAAD,UACG,eAAC,IAAD,CAAyBC,MAAOC,IAAhC,UACG,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAmBC,UAAU,IAC7B,cAAC,EAAD,IACA,cAAClD,EAAD,CACGC,aAAcS,GAAYC,EAC1BY,KAAM,CAACC,IAA8B2B,IAAuBC,KAF/D,SAIG,cAAC5C,EAAD,MAEH,sBAAMvB,MAAO,CAACoE,OAAO,eAAD,OAAiBC,IAAjB,OAApB,SACG,eAAC,IAAD,WACG,cAACtD,EAAD,CAAgBC,aAAcS,GAAYC,EAASY,KAAM4B,IAAzD,SACG,cAAC5C,EAAD,MAEH,cAACP,EAAD,CAAgBC,aAAcU,EAASY,KAAM6B,IAA7C,SACG,cAAC/C,EAAD,MAEH,cAAC,IAAD,CAAOkB,KAAMgC,IAAcC,OAAQ,kBAAM,cAAC,IAAD,CAAUpD,GAAI8B,mBAQzE,OAAO,O,uGC7GPuB,EAAgB,SAAC,GAA6F,IAA5F1E,EAA2F,EAA3FA,GAAImB,EAAuF,EAAvFA,SAAU/B,EAA6E,EAA7EA,OAA6E,IAArEuF,YAAqE,MAA9D,OAA8D,EAAtDC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,cAAkBC,EAAgB,uFAKhH,SAASC,EAAkBC,GACxB,OAAOA,EACHC,KAAI,SAACC,GAAD,MAA2B,kBAATA,EAAoBA,EAAKC,MAAM,MAAMF,KAAI,SAACG,GAAD,OAAU,4BAAIA,OAAaF,KAC1FG,QAAO,SAACL,EAAOE,GAAR,OAAiBF,EAAMM,OAAOJ,KAAO,IAGnD,OAVI/F,IAAWwF,GAAWxF,EAAOwF,WAC9BxF,EAAOoG,EAAI,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAe,4BAAIA,MAS7BzF,EACY,WAAT2E,EAEE,cAAC,IAAD,yBAAY3E,GAAIA,GAAQ+E,GAAxB,aACG,cAAC,IAAD,aAAiB/E,GAAIA,EAAI0F,eAAgBvE,EAAU/B,OAAQA,GAAYyF,OAK7E,cAAC,IAAD,yBAAY7E,GAAIA,GAAQ+E,GAAxB,aACI5D,EACE,eAAC,IAAD,CAAMwE,WAAS,EAACC,WAAY,SAAUC,WAAW,EAAOC,QAAS,SAAjE,UACG,cAAC,IAAD,CAAMC,MAAI,EAAV,SACG,cAAC,IAAD,yBAAkB/F,GAAIA,EAAI0F,eAAgBvE,EAAU/B,OAAQA,GAAYyF,GAAxE,aACIC,EAAgBE,OAAoBnD,OAG3C,cAAC,IAAD,CAAMkE,MAAI,EAAV,SAAY5E,OAGf,cAAC,IAAD,yBAAkBnB,GAAIA,EAAI0F,eAAgBvE,EAAU/B,OAAQA,GAAYyF,GAAxE,aACIC,EAAgBE,OAAoBnD,QAM1C,cAAC,IAAD,2BAAgBkD,GAAhB,aAA6B5D,MAW1CuD,EAAcsB,aAAe,CAC1BC,QAAS,WAEZvB,EAAcwB,YAAc,gBAEbxB,O,kxBC3CR,SAASyB,EAAcC,EAAMpG,EAAI0F,EAAgBtG,GACrD,IAAMiH,EAA4DX,EAElE,OAAI1F,EACMoG,EAAOA,EAAKD,cAAc,CAACnG,KAAI0F,eAAgBW,GAAoBjH,GAAUiH,EAE7E,GAiFN,SAASC,EAAUC,EAAOC,GAC9B,GAAIA,GAAS,GAAKD,GAASA,EAAMjJ,OAAQ,CACtC,IAAImJ,EAAMF,EAAMjJ,OAChB,IAAKmJ,EACF,OAGH,IADAA,GAAO,EACAD,EAAQC,GACZF,EAAMC,GAASD,EAAMC,EAAQ,GAC7BA,IAEHD,EAAMjJ,SAET,OAAOiJ,EAsBH,SAASG,EAASX,GACtB,OACIY,IAAMZ,IACE,KAATA,KACEa,IAAQb,IAASA,EAAKzI,OAAS,MAC/BuJ,IAAad,IAASe,OAAOC,KAAKhB,GAAMzI,OAAS,GAoJlD,IAAM0J,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACVC,MAAMF,GADI,cACvBlE,EADuB,gBAEVA,EAAKqE,OAFK,cAEvBA,EAFuB,yBAGtB,IAAIC,SAAQ,SAACC,GACjB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcL,GACrBG,EAAOG,UAAY,WAChB,IAAMC,EAAaJ,EAAOK,OAC1BN,EAAQK,QARe,2CAAH,sDAahBE,EAAa,SAAC7G,EAAO8G,EAAOC,GAAgD,IAClFC,EAD0CC,IAAuC,yDAAnBC,EAAmB,uCAATxJ,EAAS,uCAEjFyJ,EAAgBzJ,EAEpB,QAAiBmD,IAAbqG,EACD,IAAIJ,GAAqB,SAAXC,GAAgC,kBAAXA,GAAyC,kBAAXA,EAO1D,GAAID,GAAoB,gBAAXC,EACjBC,EAAYF,EACZK,EAAgBnH,EAAMoH,OAAO1J,UAE7B,GAAIsC,GAASA,EAAMoH,OAAQ,CACxB,OAAQpH,EAAMoH,OAAOzD,MAClB,IAAK,SACFqD,EAAYhH,EAAMoH,OAAOC,cACzB,MACH,IAAK,WACFL,EAAYhH,EAAMoH,OAAOE,QACzB,MACH,IAAK,aACFN,EAAYhH,EAAMoH,OAAOG,KACzB,MACH,IAAK,eACFP,EAAYhH,EAAMoH,OAAON,MACzB,MACH,IAAK,sBACFE,EAAYQ,EAASxH,EAAMoH,OAAON,OAClC,MACH,QACG,IAAMnD,EAAO8D,IAAIzH,EAAO,uBAErBgH,EADU,WAATrD,EACW6D,EAASxH,EAAMoH,OAAON,OAEtB9G,EAAMoH,OAAON,MAIlCK,EAAgBnH,EAAMoH,OAAO1J,UAE7BgK,QAAQC,IAAI,6BAtCfX,EAA6B,kBAAVF,EAAqBA,EAAQA,EAAM9H,GACtDmI,EACGzJ,GACA+J,IAAIzH,EAAO,4CACXyH,IAAIzH,EAAO,gDACXA,EAAMoH,OAAO1J,KAsCtB,OAAIwJ,EACMD,EAAcC,EAAW,CAACC,gBAAeD,SAAUA,EAASxJ,IAC3DuJ,EACD,eAAEE,EAAgBH,GAErB,CAACG,gBAAeD,SAAUF,IAuCvBY,EACV,SAAClK,GAAD,OACA,SAACmK,EAAD,GAA2B,IAAjBC,EAAgB,EAAhBA,WACDC,EAA8B,kBAAXF,EAAsBA,EAASA,EAAOnK,GAC/D,GAAkB,OAAdqK,EACD,MAAO,WAGV,IAAMC,EAAUC,IAAMF,EAAWD,GAC3BI,EAAQC,IAAMJ,EAAWC,GAE/B,OACG,8BACIE,EAAMhE,KAAI,SAACkE,EAAM5C,GACf,OAAI4C,EAAK/D,KAEH,sBAAkBnF,MAAO,CAACmJ,WAAYD,EAAKE,UAAY,IAAM,KAA7D,SACIF,EAAK/D,MADEmB,GAMX,sBAAkBtG,MAAO,CAACmJ,WAAY,IAAKpJ,MAAO,WAAlD,qBAAWuG,UAgBnB+C,EAAwB,SAACC,GACnC,GAAIA,EACD,MAAM,YAAN,OAAmBA,EAAWxJ,KAK7B,SAASwI,EAASV,GAA6B,IAAtB2B,IAAqB,yDAClD,OAAc,OAAV3B,QAA4BjG,IAAViG,GAAwB2B,GAA0B,KAAV3B,EACpD,KAEA4B,IAAU5B,GAIhB,SAAS6B,EAAiB7B,GAA6B,IAAtB2B,IAAqB,yDACpD7B,EAASY,EAASV,EAAO2B,GAC/B,OAAOG,gBAAMhC,GAAUE,EAAQF,EA2C3B,SAASiC,EAAS9D,EAAM+D,EAAUC,GAGtC,OAF6B,oBAAThE,EAAsBA,EAAK+D,GAAY/D,IAE1CgE,EAGb,SAASC,EAAatL,GAAmB,IACnC,IADsBwB,EAAY,uDAAJ,GACxC,OAAIxB,EACM,CACJwB,MAAM,aACHpC,gBAAiB,OACjBmC,MAAO,OACPgK,MAAO,GACP3F,OAAQ,GACR4F,YAAa,GACVhK,GAENiB,SAAS,GAAD,OAAKzC,EAAK0G,MAAM,KAAK,GAAG,IAAxB,QAA6B,UAAA1G,EAAK0G,MAAM,YAAX,mBAAkB,UAAlB,eAAuB,KAAM,KAGjE,CAAClF,SAGJ,SAASiK,IAAmC,IAAD,EAAzB5D,EAAyB,uDAAjB,GAAI6D,EAAa,uDAAJ,GACrCxC,EAAS,GADgC,cAGpBrB,GAHoB,IAG/C,2BAAkC,CAAC,IAAxB8D,EAAuB,QACzB7D,EAAQrJ,kBAAQiN,EAAD,OAASC,QAAT,IAASA,OAAT,EAASA,EAAcrK,IACxCwG,GAAS,GACVoB,EAAOvK,KAAKgN,IAN6B,8BAS/C,OAAOzC,EA6BH,SAAS0C,EAAalD,EAAMmD,GAChC,IAAMtD,EAAMuD,IAAIC,gBAAgBrD,GAC1BF,EAAIwD,SAASC,cAAc,KACjCzD,EAAE0D,KAAO3D,EACTC,EAAE2D,SAAWN,GAAY,WASzB,OAFArD,EAAE4D,iBAAiB,SANE,SAAfC,IACHC,YAAW,WACRR,IAAIS,gBAAgBhE,GACpBC,EAAEgE,oBAAoB,QAASH,KAC/B,QAEoC,GAC1C7D,EAAEiE,QACKjE,EAGH,SAASkE,EAAcC,GAA4B,IAArBC,EAAoB,wDAARC,EAAQ,uDAAH,EAC7CC,EAASF,EAAK,IAAO,KAE3B,GAAIG,KAAKC,IAAIL,GAASG,EACnB,OAAIH,GAAS,EACH,IAEHA,EAAQ,SAGlB,IAAMM,EAAQL,EACT,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC3C,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACnDM,GAAK,EACHC,EAAC,SAAG,GAAMN,GAEhB,GACGF,GAASG,IACPI,QACIH,KAAKK,MAAML,KAAKC,IAAIL,GAASQ,GAAKA,GAAKL,GAAUI,EAAID,EAAMrO,OAAS,GAE7E,OAAO+N,EAAMU,QAAQR,GAAM,IAAMI,EAAMC,GAGnC,SAASI,EAAatN,GAC1B,GAAIA,EAAM,CACP,IAAMuN,EAAYvN,EAAKwN,YAAY,KACnC,GAAID,GAAa,EACd,OAAOvN,EAAKyN,UAAUF,EAAY,GAGxC,MAAO,GAGH,SAASG,EAAiBC,GAC9B,MAAO,oBAAsBA,EAGzB,SAASC,EAAaC,GAC1B,OAAOA,EAAOlJ,QAAQ,sBAAuB,U,kJCtmB1C3F,EAAYC,IACf,CACG6O,UAAW,SAACC,GACT,MAAO,CACJC,SAAUD,EAAMC,SAChBpI,QAA6B,IAArBmI,EAAME,WAAsB,QAA8B,IAArBF,EAAME,WAAuB,aAAU9K,EACpFoI,OAA2B,IAApBwC,EAAMG,UAAqB,QAA6B,IAApBH,EAAMG,UAAsB,aAAU/K,EACjFgL,KAAMJ,EAAMI,KACPJ,EAAMI,KACNJ,EAAM5G,UACN,OACoB,IAApB4G,EAAM5G,UACN,gBACAhE,IAGXiL,eAAgB,SAACL,GACd,MAAO,CACJC,SAAUD,EAAMC,SAChBpI,QAA6B,IAArBmI,EAAME,WAAsB,QAA8B,IAArBF,EAAME,WAAuB,aAAU9K,EACpFoI,MAAO,OACP4C,KAAMJ,EAAMI,KACPJ,EAAMI,KACNJ,EAAM5G,UACN,OACoB,IAApB4G,EAAM5G,UACN,gBACAhE,KAId,CAACnD,KAAM,eAGJqO,EAAOC,sBA6BV,SAAcP,EAAOQ,GAAM,IAErBvO,EAqBC+N,EArBD/N,KAKAyC,GAgBCsL,EApBDC,SAoBCD,EAnBDG,UAmBCH,EAlBDI,KAkBCJ,EAjBDS,WAiBCT,EAhBDtL,UACAJ,EAeC0L,EAfD1L,UAGAgF,GAYC0G,EAdD5G,UAcC4G,EAbDE,WAaCF,EAZD1G,MACAJ,EAWC8G,EAXD9G,UACAxH,EAUCsO,EAVDtO,QACA2H,EASC2G,EATD3G,QACAF,EAQC6G,EARD7G,WACAuH,EAOCV,EAPDU,aACAC,EAMCX,EANDW,aAjBoB,EAuBnBX,EALDY,0BAlBoB,SAmBpBC,EAICb,EAJDa,WACAC,EAGCd,EAHDc,UACAC,EAECf,EAFDe,KACGzI,EAtBiB,YAuBnB0H,EAvBmB,4OAyBjBgB,EAAa,eAAOhB,GAC1BgB,EAAcd,aAAaS,GAAsBX,EAAME,WACvDc,EAAcf,SAAWU,EAAe,OAASX,EAAMC,SAEvD,IAuBIgB,EAvBE9P,EAAQ+P,MACRC,EAAUC,mBACVjP,EAAUlB,EAAU+P,GA/BH,EAgCyB5O,qBAhCzB,mBAgChBiP,EAhCgB,KAgCEC,EAhCF,KAkCjBC,EAAmB/Q,uBAAY,WAClC,GAAI2Q,EAAQK,SAAWb,EAAc,CAClC,IAAMc,EAAsBN,EAAQK,QAAQE,aAAeP,EAAQK,QAAQG,aAC3EL,EAAoBG,MAEvB,CAACN,EAASR,IAGPiB,EAAwBR,iBAAOS,IAASN,EAAkB,MAAMC,QA0CtE,OAxCA1O,qBAAU,WACP,GAAI6N,EAGD,OAFAY,IACAtN,OAAOoK,iBAAiB,SAAUuD,GAC3B,kBAAM3N,OAAOwK,oBAAoB,SAAUmD,MAErD,CAACL,EAAkBK,EAAuBjB,EAAcQ,IAKxDF,EADCN,EAEE,cAAC,IAAD,CACG1O,KAAK,oBACLuO,IAAKW,EACL7M,UAAWnC,EAAQkO,eACnB5M,MAAK,aACFqO,aAAqB1M,IAAZ1D,EAAwBP,EAAMO,QAAQA,QAAW0D,EAC1D3D,aACG4P,GAAoBT,EACf,OACYxL,IAAZ1D,EACAP,EAAMO,QAAQA,QACd0D,GACLyL,GAEN3H,UAAWA,EACXI,KAAMA,EACN5H,QAASA,EACT2H,QAASA,EACTF,WAAYA,EACZuH,aAAcA,EAnBjB,SAqBIhM,IAICA,EAIR,cAAC,IAAD,yBACG8L,IAAKA,EAELvO,KAAMA,EACNqC,UAAS,UAAKnC,EAAQ4N,UAAb,YAA0BzL,GACnCgF,OAAMqH,GAAsBrH,EAC5BJ,WAAWyH,GAAuBzH,GAC9BZ,GAPP,IASG5G,QAAUiP,OAAyBvL,EAAV1D,EACzB2H,QAAUsH,OAAyBvL,EAAViE,EACzBF,WAAawH,OAA4BvL,EAAb+D,EAC5BuH,aAAeC,OAA8BvL,EAAfsL,EAC9BI,UAAYH,OAA2BvL,EAAZ0L,EAC3BC,KAAOJ,OAAsBvL,EAAP2L,EAdzB,SAgBIE,QA4BbX,EAAK/G,aAAe,CACjB0G,SAAU,UAGEK,O,sGCrMTrP,EAAYC,KAAW,SAAAC,GAAK,MAAK,CACpC4Q,cAAe,CACZ/P,OAAQ,IACRwB,MAAO,OACPwO,QAAS,kBAEZC,cAAe,CACZrQ,SAAU,WACVE,IAAK,MACLoQ,KAAM,MACNlQ,OAAQ,QAEV,CAACC,KAAM,kBA8BIkF,IAtBf,YAAqG,IAAD,IAAlFC,iBAAkF,aAAlE+K,mBAAkE,aAA7ChQ,QAAQiQ,OAAqC,MAAvB,GAAuB,EAAhBC,EAAgB,qDAC3FlQ,EAAO,2BAAOlB,KAAgBmR,GAEpC,OAAIhL,EACG+K,EACM,qCACJ,cAAC,IAAD,CAAkB7N,UAAWnC,EAAQ8P,gBACrC,cAAC,IAAD,CAAU3N,UAAWnC,EAAQ4P,cAAe1P,MAAM,OAG9C,cAAC,IAAD,aAAkBiC,UAAWnC,EAAQ8P,eAAmBI,IAG3D,O,mLChCAC,EAAkBzS,YAAK,CACjCC,IAAK,qBACLC,QAAS,CAACwS,OAAQ,GAAIC,aAASpN,KAGrBI,EAA2B3F,YAAK,CAC1CC,IAAK,qBACLC,QAAS,KAGC0S,EAAa5S,YAAK,CAC5BC,IAAK,aACLC,QAAS,KAGG,SAAS2S,EAAT,GAAmD,IAAvBC,EAAsB,EAAtBA,UAAWjO,EAAW,EAAXA,SAC7CkO,EAAgBC,YAAkBP,GADsB,EAE9BlS,YAAe6E,KAFe,mBAEvDK,EAFuD,KAE7CwN,EAF6C,OAGpB1S,YAAeoF,GAHK,mBAGvDuN,EAHuD,KAGxCC,EAHwC,OAIpB5Q,oBAAS,GAJW,mBAIvD6Q,EAJuD,KAIxCC,EAJwC,KAwB9D,OAlBApQ,qBAAU,WACP,GAAI6P,EAAW,CAAC,IAAD,YACNJ,EAAM,iBAAGI,QAAH,IAAGA,GAAH,UAAGA,EAAW5L,YAAd,iBAAG,EAAiBoM,yBAApB,iBAAG,EAAoCC,eAAvC,iBAAG,EAA6CC,eAAhD,aAAG,EAAuD,yBAA1D,QAA+E,GAC3FT,EAAc,CAACL,SAAQC,QAASG,EAAUH,UAE1C,IAM0D,MANpDrN,EAAUoN,EAAO7R,QAAQ4S,MAAgB,EAM/C,GAJInO,IAAYG,EAASH,SAAWG,EAASJ,WAAaC,GACvD2N,EAAY,CAAC3N,QAASA,EAASD,UAAWC,IAGzC4N,EAAcQ,YAAd,OAA2BZ,QAA3B,IAA2BA,GAA3B,UAA2BA,EAAW5L,YAAtC,aAA2B,EAAiBwM,UAC7CP,EAAiB,CAACO,SAAQ,OAAEZ,QAAF,IAAEA,GAAF,UAAEA,EAAW5L,YAAb,aAAE,EAAiBwM,SAAU1M,WAAU,OAAE8L,QAAF,IAAEA,GAAF,UAAEA,EAAW5L,YAAb,iBAAE,EAAiByM,kBAAnB,aAAE,EAA6BC,MAEnGP,GAAiB,MAEpB,CAACP,IAEAA,GAAaM,EACPvO,EAEA,O,mSCvCAgP,EAAuB,eACvBC,EAAgB,SAChBC,EAAc,OACdC,EAAkB,WAqBhB,SAASC,EAAeC,EAAUC,EAASC,GACvD,IAAMC,EAAc9C,iBAAOjR,OAAYqR,QACjC7H,EAAOwK,cAFuD,EAGjCjU,YAAYgU,GAA3B3T,EAHgD,oBAK9D6T,EAAgBvB,YAAkBpQ,KAL4B,EAO9BL,mBAAS,IAPqB,mBAO7DiS,EAP6D,KAOhDC,EAPgD,KASpExR,qBAAU,WACP,OAAO,WACJvC,GAAY,MAEf,CAACA,IAbgE,MAejBgU,YAAYR,EAASA,SAAUC,GAfd,mBAe7DQ,EAf6D,YAe1CC,EAf0C,EAe1CA,QAASlT,EAfiC,EAejCA,MAAO+E,EAf0B,EAe1BA,KAwB1C,OAtBAxD,qBAAU,WACP,GAAIvB,EAAO,CACR,IAAM2G,EAAOwB,YAAcC,EAAMoK,EAASW,SACpC7Q,EAAS6F,YAAcC,EAAMoK,EAASY,WACtCvT,EAAesI,YAAcC,EAAM,oBAAgBvE,EAAW,CAAC8C,OAAMrE,WAEvEzC,IAAiBiT,IAClBpI,QAAQC,IAAI3K,GACZ+S,EAAelT,GACfgT,EAAc,CAAC7S,QAAOH,eAAcsB,cAAU0C,eAEzBA,IAAhBiP,GACRC,OAAelP,KAElB,CAAC7D,EAAO6S,EAAeC,EAAa1K,EAAMoK,EAASY,UAAWZ,EAASW,UAE1E5R,qBAAU,WACHmR,GACD1T,EAAYkU,KAEf,CAACA,EAASlU,EAAa0T,IAEnB,CAACO,EAAkB,CAACC,UAASlT,QAAO+E,W,gCCzE9C,qnEACO,IAAMsO,EAAuB,aACvBC,EAAe,UACfC,EAAoB,MACpBC,EAAc,OACdC,EAAmB,mBACnBC,EAAqB,sBACrBC,EAAiB,aACjBC,EAAkB,kBAClBC,EAAuB,oBACvBC,EAAiB,UACjBC,EAAkC,EAGlCC,EAAS,CACnB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,WACA,UAGUC,EAAiB,CAC3BC,IAAK,UACLC,IAAK,WACLC,IAAK,QACLC,IAAK,QACLC,IAAK,MACLC,IAAK,OACLC,IAAK,OACLC,IAAK,SACLC,IAAK,YACLC,IAAK,UACLC,IAAK,WACLC,IAAK,WACLC,OAAQ,UASEC,EAAc,UACdC,EAAgB,UAChBC,EAAgB,UAChBC,EAAgB,kBAEhBC,EAAY,mBACZC,EAAc,mBAEdC,EADa,0BAEbC,EAAe,qCAEfC,EAAW,iBAETC,oEAFS,iBAGxB9K,QAAQC,IAAI,cAAe4K,GAC3B7K,QAAQC,IAAI,aAAc6K,aAEnB,IAAMjP,EAAgB,GAChBkP,EAAsB,GACtBC,EAAe,IACfC,EAAoB,IACpBC,EAAe,IAGfC,EAAkB,CAC5B,aACA,WACA,kBACA,2BACA,qEAEUC,EAAc,iCAGdC,EAAc,2BACdC,EAAgB,IAChBC,EAAU,OACVC,EAAkB,cAClBC,EAAiB,aAGjBpE,EAAc,QAGdqE,EAAc,SACdC,EAAc,SACdC,EAAY,OACZC,EAAY,OACZC,EAAa,QACbC,EAAiB,YACjBC,EAAY,WAGZlQ,EAAe,IACfd,EAAa,SACbW,EAAmB,oBACnBD,EAAwB,oBACxB3B,EAA+B,qCAC/BkS,EAAoC,oDACpCC,EAAqB,0CACrBC,EAAoB,2CACpBC,EAAmB,+CAGnBC,GAAqB,6CAErBC,GAAkB,0CAGlB5R,GAAqB,kDAErB6R,GAAqB,kDAErBC,GAAiB,8CACjBC,GAAa,2CAEbC,GAAyB,sDACzBC,GAAyB,0CACzBC,GAAkB,uBAClBC,GAAmB,cACnBC,GAAqB,gBACrBC,GAAoB,uC,+qHCnIpBC,GAAkBC,aAAH,iRAkBfC,GAAgBD,aAAH,kLAYbE,GAAkBF,aAAH,8IAUfG,GAAmBH,aAAH,gJAUhBI,GAAiBJ,aAAH,mLAWdK,GAAqBL,aAAH,yLAYlBM,GAAgBN,aAAH,uRAiBbO,GAAwBP,aAAH,mKAUrBQ,GAAkBR,aAAH,4LAafS,GAAgBT,aAAH,wNAcbU,GAAiBV,aAAH,gbA4BdW,GAAqBX,aAAH,iGAOlBY,GAAqBZ,aAAH,4dAoClBa,IAPgBb,aAAH,yFAOKA,aAAH,sUAmBfc,GAAuBd,aAAH,sIASpBe,GAAmBf,aAAH,yNAchBgB,GAAwBhB,aAAH,wIASrBiB,GAA0BjB,aAAH,8qCA2DvBkB,GAAyBlB,aAAH,6vDAyE7BmB,GAA6BnB,aAAH,oKAU1BoB,GAAgCpB,aAAH,+2BAgDtBqB,GAAqBrB,aAAH,grBA4B1BoB,GACAD,IAGQG,GAA4BtB,aAAH,6PAazBuB,GAAgBvB,aAAH,sNC/cbwB,GAAmBxB,aAAH,0PAgBhByB,GAAsB,WAChC,MAAO,CAAC,CAACC,MAAOF,GAAkBG,UAAW,YAGnCC,GAAqB,CAC/B/G,SAAUmF,aAAF,8OASRxE,QAAS,YACTC,UAAWjB,MAcDqH,IAVA7B,aAAF,qHAMGvF,KAIkBuF,aAAH,kIAMxBD,KAGQ+B,GAAqB9B,aAAH,yKAM1BD,IAGQgC,GAAwB,WAClC,MAAO,CAAC,CAACL,MAAOG,GAAkBF,UAAW,aAGnCK,GAAuB,CACjCnH,SAAUmF,aAAF,u8BAkCHD,IAELvE,QAAS,cACTC,UAAWjB,MAIDyH,GAAgB,CAC1BpH,SAAUmF,aAAF,2HAKRxE,QAAS,cACTC,UAAWhB,MAKDyH,GAAqB,CAC/BrH,SAAUmF,aAAF,qkBAsBHC,IAELzE,QAAS,YACTC,UAAWjB,MAID2H,GAAc,CACxBtH,SAAUmF,aAAF,qHAKRxE,QAAS,YACTC,UAAWhB,MAGDvN,GAAoB8S,aAAH,+PAMzBC,IAGQmC,GAAmBpC,aAAH,8JAMxBC,IAGQoC,GAAsB,WAAsB,IAArB9V,EAAoB,uDAAT,KAC5C,MAAO,CAAC,CAACmV,MAAOxU,GAAmBU,UAAW,CAACrB,YAAWoV,UAAW,WAI3DW,GAAqBtC,aAAH,mLAM1BE,IAEQqC,GAAyBvC,aAAH,odAwBtBwC,GAA4BxC,aAAH,krBAuCzByC,IARezC,aAAH,+MAMpBE,IAEgC,WAClC,MAAO,CAAC,CAACwB,MAAOY,GAAoB1U,UAAW,CAAC8U,QAAQ,GAAOf,UAAW,cAGhEgB,GAAuB,CACjC9H,SAAUmF,aAAF,uUAOHE,IAEL1E,QAAS,WACTC,UAAWjB,MAGDoI,GAAgB,CAC1B/H,SAAUmF,aAAF,2HAKRxE,QAAS,WACTC,UAAWhB,MAyBDoI,IAtBqB7C,aAAH,kOAUGA,aAAH,kQAYI,CAChCnF,SAAUmF,aAAF,uRAURxE,QAAS,kBACTC,UAAWjB,OAEDsI,GAAsB,CAChCjI,SAAUmF,aAAF,6HAKRxE,QAAS,YACTC,UAAWhB,MAGDsI,GAAsB/C,aAAH,kPAM3BG,IAEQ6C,GAAuB,SAACC,EAAWC,GAC7C,MAAO,CAAC,CAACxB,MAAOqB,GAAqBnV,UAAW,CAACqV,UAAWA,EAAWC,UAAWA,GAAYvB,UAAW,aAE/FwB,GAAenD,aAAH,wNAMpBG,IAEQiD,GAAwB,CAClCvI,SAAUmF,aAAF,6TAOHG,IAEL3E,QAAS,cACTC,UAAWjB,MAGD6I,GAAgB,CAC1BxI,SAAUmF,aAAF,4HAKRxE,QAAS,cACTC,UAAWhB,MAGD6I,GAAoBtD,aAAH,gaAezBI,IAGQmD,GAAsB,SAACC,EAAWN,GAC5C,MAAO,CAAC,CAACxB,MAAO4B,GAAmB1V,UAAW,CAAC4V,UAAWA,EAAWN,UAAWA,GAAYvB,UAAW,WAU7F8B,IARazD,aAAH,gNAMlBI,IAE+BJ,aAAH,0fAoB5BI,KAEQsD,GAAyB,SAACrZ,EAAI6Y,GACxC,MAAO,CAAC,CAACxB,MAAO+B,GAAsB7V,UAAW,CAACvD,GAAIA,EAAI6Y,UAAWA,GAAYvB,UAAW,WAElFgC,GAAqB,CAC/B9I,SAAUmF,aAAF,+wBAyBHI,IAEL5E,QAAS,YACTC,UAAWjB,MAiBDoJ,GAAc,CACxB/I,SAAUmF,aAAF,wHAKRxE,QAAS,YACTC,UAAWhB,MAGDoJ,GAAoB,CAC9BhJ,SAAUmF,aAAF,6HAKRxE,QAAS,YACTC,UAAWhB,MAGDqJ,GAAY,CACtBjJ,SAAUmF,aAAF,0LAKRxE,QAAS,YACTC,UAAWf,MAGDqJ,GAAwB/D,aAAH,wPAM7BK,IAcQ2D,IAXAhE,aAAF,0QAMHK,IAGM7F,KAE0B,SAACyJ,EAASf,GAC/C,MAAO,CAAC,CAACxB,MAAOqC,GAAuBnW,UAAW,CAACqW,QAASA,EAASf,UAAWA,GAAYvB,UAAW,gBAE7FuC,GAAmB,CAC7BrJ,SAAUmF,aAAF,qIAKRxE,QAAS,iBACTC,UAAWhB,MAED0J,GAAiB,CAC3BtJ,SAAUmF,aAAF,qQAMHK,IAEL7E,QAAS,iBACTC,UAAWjB,MAID4J,GAAqB,CAC/BvJ,SAAUmF,aAAF,q/BAkCHM,IAEL9E,QAAS,YACTC,UAAWjB,MAGD6J,GAAoBrE,aAAH,mOAMzBM,IAGQgE,GAAatE,aAAH,yJAMlBM,IAIQiE,GAAc,CACxB1J,SAAUmF,aAAF,uHAKRxE,QAAS,YACTC,UAAWhB,MAGD+J,GAAqBxE,aAAH,wRAM1BM,IAGQmE,GAAsB,SAAClY,EAAUmY,GAC3C,IAAMC,EAAU,CACb,CAACjD,MAAO2C,GAAmBzW,UAAW,CAACrB,YAAWoV,UAAW,SAC7D,CACGD,MAAO8C,GACP5W,UAAW,CAACrB,WAAUqY,cAAexI,MACrCuF,UAAW,SAEd,CAACD,MAAO8C,GAAoB5W,UAAW,CAACrB,WAAUqY,cAAe,GAAIjD,UAAW,UAOnF,OAJI+C,GACDC,EAAQjd,KAAK,CAACga,MAAOmD,GAAyBjX,UAAW,CAAC8W,UAAS/C,UAAW,gBAG1EgD,GAGGE,GAA0B7E,aAAH,kYAU/BO,IAGQuE,GAAsB,CAChCjK,SAAUmF,aAAF,4IAKRxE,QAAS,mBACTC,UAAWhB,MAGDsK,GAA6B,SAACL,EAAQM,GAChD,IAAML,EAAU,CAAC,CAACjD,MAAOmD,GAAyBjX,UAAW,CAAC8W,UAAS/C,UAAW,gBAMlF,OAJIqD,GACDL,EAAQjd,KAAK,CAACga,MAAOmD,GAAyBjX,UAAW,CAAC8W,SAAQM,sBAAqBrD,UAAW,gBAG9FgD,GAIGM,GAAuB,CACjCpK,SAAUmF,aAAF,8nBAwBHQ,IAELhF,QAAS,cACTC,UAAWjB,MAID0K,GAAgB,CAC1BrK,SAAUmF,aAAF,6HAKRxE,QAAS,cACTC,UAAWhB,MAGD0K,GAAsBnF,aAAH,kUAQ3BQ,IAGQ4E,GAAqBpF,aAAH,2KAM1BQ,IAGQ6E,GAAwB,SAAC9Y,GACnC,MAAO,CAAC,CAACmV,MAAOyD,GAAqBvX,UAAW,CAACrB,YAAWoV,UAAW,cAI7D2D,GAAc,CACxBzK,SAAUmF,aAAF,ypBAuBHS,IAELjF,QAAS,YACTC,UAAWjB,MAID+K,GAAc,CACxB1K,SAAUmF,aAAF,mIAKRxE,QAAS,YACTC,UAAWhB,MAGD+K,GAAoBxF,aAAH,+TAQzBS,IAGQgF,GAAsB,SAAClZ,EAAUgB,EAAUmY,GACrD,MAAO,CAAC,CAAChE,MAAO8D,GAAmB5X,UAAW,CAACrB,WAAUgB,WAAUmY,OAAM/D,UAAW,WAa1EgE,IAVoB3F,aAAH,+IAUKA,aAAH,oPAM3BU,KAGQkF,GAAc5F,aAAH,uNAMnBU,IAGQmF,GAAyB,SAACtY,EAAUuY,EAASC,GACvD,MAAO,CACJ,CAACrE,MAAOiE,GAAqB/X,UAAW,CAACL,WAAUwY,eAAcpE,UAAW,UAC5E,CAACD,MAAOkE,GAAahY,UAAW,CAACkY,UAASC,eAAcpE,UAAW,SACnE,CAACD,MAAOsE,GAAqBpY,UAAW,CAACL,WAAUwY,eAAcpE,UAAW,WAIrEsE,GAAsB,CAChCpL,SAAUmF,aAAF,m2CA8CHU,IAELlF,QAAS,cAGC0K,GAAe,CACzBrL,SAAUmF,aAAF,0HAKRxE,QAAS,aACTC,UAAWhB,MAGD0L,GAAuBnG,aAAH,qKAUpBoG,GAAkBpG,aAAH,mIAUfqG,GAA0B,CACpCxL,SAAUmF,aAAF,wOAMHW,IAELnF,QAAS,gBACTC,UAAWjB,MAGD8L,GAA0B,WACpC,MAAO,CAAC,CAAC5E,MAAO0E,MAING,GAA2BvG,aAAH,0QAMhCY,IAGQ4F,GAAkBxG,aAAH,mPAMvBY,IAGQ6F,GAA6B,SAAClZ,EAAUmZ,EAAaX,GAC/D,MAAO,CACJ,CAACrE,MAAO6E,GAA0B3Y,UAAW,CAACL,WAAUwY,eAAcpE,UAAW,eACjF,CAACD,MAAO8E,GAAiB5Y,UAAW,CAAC8Y,cAAaX,eAAcpE,UAAW,aAC3E,CAACD,MAAOiF,IACR,CAACjF,MAAOkF,MAIDC,GAA0B,CACpChM,SAAUmF,aAAF,o7CA8CHY,IAELpF,QAAS,kBAGCsL,GAAmB,CAC7BjM,SAAUmF,aAAF,sIAKRxE,QAAS,iBACTC,UAAWhB,MAGDsM,GAA2B/G,aAAH,mKASxB2G,GAAuB3G,aAAH,qJASpB4G,GAAa5G,aAAH,wHAmBVgH,IATehH,aAAH,+RAMpBa,IAG+B,CACjChG,SAAUmF,aAAF,0vBA0BHa,IAELrF,QAAS,gBAGCyL,GAAgB,CAC1BpM,SAAUmF,aAAF,6HAKRxE,QAAS,cACTC,UAAWhB,MAGDyM,GAAyB,WACnC,MAAO,IAOGC,GAA4B,CACtCtM,SAAUmF,aAAF,8RAMHc,IAELtF,QAAS,kBACTC,UAAWjB,MAGD4M,GAAqB,CAC/BvM,SAAUmF,aAAF,yIAKRxE,QAAS,kBACTC,UAAWhB,MAGD4M,GAAuB,CACjCxM,SAAUmF,aAAF,6IAKRxE,QAAS,kBACTC,UAAWd,MAGD2M,GAA6B,WACvC,MAAO,IAeGC,IATqBvH,aAAH,uJAM1BgB,IAGgC,CAClCnG,SAAUmF,aAAF,kwBA0BHe,IAELvF,QAAS,iBAGCgM,GAAiB,CAC3B3M,SAAUmF,aAAF,gIAKRxE,QAAS,eACTC,UAAWhB,MAIDgN,GAA6B,CACvC5M,SAAUmF,aAAF,mSAMHgB,IAELxF,QAAS,mBACTC,UAAWjB,MAGDkN,GAAsB,CAChC7M,SAAUmF,aAAF,4IAKRxE,QAAS,mBACTC,UAAWhB,MAGDkN,GAAwB,CAClC9M,SAAUmF,aAAF,gJAKRxE,QAAS,mBACTC,UAAWd,MAGDiN,GAA0B,WACpC,MAAO,IAKGC,GAA8B,WACxC,MAAO,IAKG7B,GAAsBhG,aAAH,iOAM3BiB,IAGQ6G,GAAsB9H,aAAH,8NAM3BkB,IAGQ6G,GAAkB/H,aAAH,+MAMvBqB,IAGQ2G,GAAmChI,aAAH,uQAMxCsB,IAaQ2G,GAAiC,CAC3CpN,SAAUmF,aAAF,o0BAwBHsB,IAEL9F,QAAS,gBACTC,UAAWjB,MAGD0N,GAAkC,SAAC3a,EAAU4a,GAAX,OAAoB,WAChE,MAAO,CAAC,CAACzG,MAAOqG,GAAiBna,UAAW,CAACL,WAAU4a,QAAOxG,UAAW,qBAG/DyG,GAAuBpI,aAAH,iNAM5BuB,IAGQ8G,GAAmBrI,aAAH,6JAMxBuB,IAEQ+G,GAAc,CACxBzN,SAAUmF,aAAF,uHAKRxE,QAAS,sBACTC,UAAWhB,MAGD8N,GAAqB,CAC/B1N,SAAUmF,aAAF,uoBAwBHuB,IAEL/F,QAAS,sBACTC,UAAWjB,MAGDgO,GAAsB,SAACjc,GACjC,MAAO,CAAC,CAACmV,MAAO0G,GAAsBxa,UAAW,CAACrB,YAAWoV,UAAW,Y,iCCt4C3E,+EAWe,SAAS8G,EAAWpe,EAAI0F,EAAgBtG,GACpD,IAAMgH,EAAOwK,cAEb,OAAOnT,mBAAQ,WACZ,OAAO0I,YAAcC,EAAMpG,EAAI0F,EAAgBtG,KAC/C,CAACY,EAAIoG,EAAMV,EAAgBtG,IAXjCgf,EAAWC,UAAY,CACpBre,GAAIse,IAAU/R,OAAOgS,WACrB7Y,eAAgB4Y,IAAU/R,OAC1BnN,OAAQkf,IAAU/X,Q,iCCRrB,kHAMe,SAASiY,EAAT,GAAoC,IAAZrd,EAAW,EAAXA,SAEhCwM,EAAW8Q,IAAMhhB,SAClB,WACG,IAAIihB,EAwDJ,OAtDAA,EAAgB,CACbC,UAAW,CACRC,UAAW,CACRC,cAAe,CACZC,SAAU,UAInB/gB,QAAS,CACNghB,QAAS,CACN9gB,MAAO,UACP+gB,KAAM9L,KACN+L,KAAM,WAETC,UAAW,CACRF,KAAM,WAETG,WAAY,CACT3iB,QAAS,WAEZ6I,KAAM,CACH0Z,QAAS,UACTG,UAAW,WAEdE,MAAO,CACJC,OAAQ,CACLN,QAAS,UACTG,UAAW,YAIjBlhB,MAAO,CACJghB,KAAMjM,KAETuM,QAAS,CACNN,KAAMhM,MAETuM,QAAS,CACNP,KAAM/L,OAGZuM,WAAY,CACTC,WAAY,uDACZC,UAAW,CACRZ,SAAU,YAEba,OAAQ,CACLC,cAAe,SAGrBC,MAAO,CACJC,aAAc,IAGbC,IAAoBC,IAAetB,MAE7C,IAEH,OACG,cAAC,IAAD,CAAkB9gB,MAAO+P,EAAzB,SACIxM,M,iCCxEV,wGASMzD,EAAYC,IAAW,CAC1B6Q,cAAe,CACZ/P,OAAQ,IACRwB,MAAO,OACPwO,QAAS,kBAEZC,cAAe,CACZrQ,SAAU,WACVE,IAAK,MACLoQ,KAAM,MACNlQ,OAAQ,MAEX,CAACC,KAAM,4BASK,SAASwF,EAAT,GAA6D,IAAD,IAAhC0K,mBAAgC,SAAXzK,EAAW,EAAXA,SACvDvF,EAAUlB,IACTuiB,EAAWhhB,YAAexC,KAGjC,OAFsBwC,YAAe5C,MAEjB4jB,IAAc9b,EAC3ByK,EACM,qCACJ,cAAC,IAAD,CAAkB7N,UAAWnC,EAAQ8P,gBACrC,cAAC,IAAD,CAAU3N,UAAWnC,EAAQ4P,cAAe1P,MAAM,OAG9C,cAAC,IAAD,CAAkBiC,UAAWnC,EAAQ8P,gBAGxC,O,8KCnCE,SAAS9L,EAAgByU,EAAO5G,EAASU,EAAST,GAC9D,IAAMC,EAAc9C,iBAAOjR,OAAYqR,QADoC,EAExCtR,YAAYgU,GAA3B3T,EAFuD,oBAGrE2H,EAAOyZ,YAAWjN,EAAS,WAE3BN,EAAgBvB,YAAkBpQ,KALmC,EAO3CghB,YAAa7I,EAAO5G,GAPuB,mBAOpE0P,EAPoE,KAOrDvY,EAPqD,KAQrEwY,EAAavS,mBAwCnB,OAtCAtO,qBAAU,YACFqI,EAAOyY,QAAUzY,EAAO7E,QAAU6E,EAAOsJ,SAAWkP,EAAWnS,UACjEmS,EAAWnS,QAAQrG,GACnBwY,EAAWnS,aAAUpM,KAExB,CAAC+F,IAEJrI,qBAAU,WACP,OAAO,WACJvC,GAAY,MAEf,CAACA,IAEJuC,qBAAU,WACHmR,GACD1T,EAAW,OAAC4K,QAAD,IAACA,OAAD,EAACA,EAAQsJ,WAEvB,QAACtJ,QAAD,IAACA,OAAD,EAACA,EAAQsJ,QAASlU,EAAa0T,IAElCnR,qBAAU,WACHqI,EAAO5J,QACR0K,QAAQC,IAAI,aAAcwI,GAC1BzI,QAAQC,IAAIf,EAAO5J,MAAO4J,EAAO5J,MAAMsiB,YACvCzP,EAAc,CAAC7S,MAAO4J,EAAO5J,MAAOmB,SAAU,aAAcC,OAAQ,CAACuF,OAAM7E,QAAS8H,EAAO5J,MAAM8B,cAEpG,QAAC8H,QAAD,IAACA,OAAD,EAACA,EAAQ5J,MAAO6S,EAAeM,EAASxM,IAapC,CAXoB1H,sBAAW,uCACnC,WAAOsG,EAAWgd,GAAlB,SAAArZ,EAAA,sEACSiZ,EAAc5c,EAAWgd,GADlC,gCAGU,IAAIlZ,SAAQ,SAACC,GACjB8Y,EAAWnS,QAAU3G,MAJ3B,2CADmC,wDAQnC,CAAC6Y,IAGwBvY,K,wcCjDzBlK,EAAYC,KAAW,SAAAC,GAAK,MAAK,CACpCC,aAAc,CACXC,gBAAgB,GAAD,OAAKF,EAAMG,QAAQC,MAAMC,MAAzB,eACfC,aAAcN,EAAMO,QAAQ,IAE/BC,iBAAkB,CACfC,SAAU,WACVC,MAAO,EACPC,IAAK,EACLC,WAAY,OACZC,OAAQ,SAEV,CAACC,KAAM,wBA+BI,SAASC,EAAT,GAAmH,IAAD,IAA1FG,YAA0F,SAA/E0hB,EAA+E,EAA/EA,QAASC,EAAsE,EAAtEA,WAAYrhB,EAA0D,EAA1DA,OAAQU,EAAkD,EAAlDA,QAAkD,IAAzCT,qBAAyC,SAAnBrB,EAAmB,EAAnBA,MAAOsB,EAAY,EAAZA,UAC5GV,EAAUlB,IAShB,OACG,cAAC8B,EAAA,EAAD,CACGV,KAAMA,EACNW,aAAc,CAACC,SAAU,MAAOC,WAAY,UAC5CC,aAAc,CACX,mBAAoB,aACpBhB,QAAS,CACNiB,KAAMjB,EAAQf,eAGpBiC,QAAS,qCACN,cAACC,EAAA,EAAD,CAAYC,GAAIygB,EAAYrhB,OAAQA,EAAQa,MAAO,UAAnD,SAA+DH,KAC7D9B,GAASsB,IACR,0BAASY,MAAO,CAACC,WAAY,WAAYugB,QAAS,OAAQC,aAAc,eAAxE,UACI3iB,GAASA,EAAMoC,WAChB,uBACCd,EAAUe,qBAIpBC,OAAQ,CACLjB,GAAiB,cAACkB,EAAA,EAAD,CAAmBN,MAAM,UAAUO,KAAK,QAAQC,QAzBpD,WACnBC,OAAOC,SAASC,UAwBO,SACd,cAACb,EAAA,EAAD,CAAYE,MAAM,UAAUD,GAAG,UAA/B,sBAD0B,QAG7BwgB,GACG,cAAC3f,EAAA,EAAD,CAEGC,aAAW,QACXb,MAAM,UACNc,UAAWnC,EAAQR,iBACnBqC,QAAS+f,EALZ,SAOG,cAAC,IAAD,KANI,Y,ICrFDI,E,kDAClB,WAAYnU,GAAQ,IAAD,8BAChB,cAAMA,IAYToU,YAAc,WACX,EAAKC,SAAS,CAAChiB,MAAM,EAAOQ,eAAWuC,EAAW7D,WAAO6D,KAZzD,EAAKkf,MAAQ,CAAEjiB,MAAM,EAAOd,MAAO,KAAMsB,UAAW,MAFpC,E,qDAKnB,SAAkBtB,EAAOsB,GACtB0hB,KAAKF,SAAS,CAAC9iB,QAAOsB,cACtBoJ,QAAQC,IAAI,iBAAkB3K,EAAOsB,K,oBAUxC,WAAU,IAAD,EAC2B0hB,KAAKD,MAA/B/iB,EADD,EACCA,MAAOsB,EADR,EACQA,UAAWR,EADnB,EACmBA,KAEzB,OAAIQ,EAEE,cAACX,EAAD,CAAeG,KAAMA,EAAMd,MAAOA,EAAOyiB,WAAYziB,EAAMyiB,WAAY3gB,QAAS9B,EAAM8B,QAASR,UAAWA,EAAWkhB,QAASQ,KAAKH,cAGlIG,KAAKvU,MAAMtL,a,GA1BmB8f,a,iHCQ3CC,IAAKC,2BAA2B,KAAM,CACnCC,SAAU,sBACVC,SAAU,wBAGb,IAAMC,GAAoB,CACvBC,OADuB,WACb,IACAC,EAAU7T,cAAV6T,OAEP,OACG,eAACC,EAAA,EAAD,CACGC,UAAU,SACVxhB,MAAO,CAAC1B,WAAY,OAAQ0L,YAAa,OAAQpM,gBAAiB,SAClEyQ,QAASiT,EAAOG,MAAMC,MACtB7gB,UAAW,eACXkJ,MAAO,OACP3F,OAAQ,OANX,UAQG,cAACud,EAAA,EAAD,CACGC,IAAI,OACJC,IAAK3O,IACLnJ,MAAO,CAAC+X,MAAO,SAAUJ,MAAO,SAChCtd,OAAQ,CAAC0d,MAAO,SAAUJ,MAAO,WAEpC,cAACK,EAAA,EAAD,CAAShiB,MAAO,UAAWsO,QAAO,UAAKiT,EAAOG,MAAMO,GAAlB,gBAA4BV,EAAOG,MAAMO,IAAMC,MAAO,EAAxF,0CAOTC,OA1BuB,WA0Bb,IACAZ,EAAU7T,cAAV6T,OAEP,OACG,cAACC,EAAA,EAAD,CAAMC,UAAU,SAASnT,QAASiT,EAAOG,MAAMC,MAAO1hB,MAAO,CAACpC,gBAAiB,SAA/E,SACG,cAACukB,EAAA,EAAD,CAAMpiB,MAAK,UAAKuhB,EAAOc,OAAOC,QAAQ,KAAtC,0CAeG,SAASC,GAAT,GAA8E,IAAnD5kB,EAAkD,EAAlDA,MAAkD,IAA3C6kB,kBAA2C,MAA9BnB,GAA8B,EAAXngB,EAAW,EAAXA,SAC9E,OACG,cAAC,IAAD,CAAiBvD,MAAOA,EAAxB,SACG,cAAC8kB,EAAA,EAAD,CAAeD,WAAYA,EAAYviB,MAAO,CAACpC,gBAAiB,aAAhE,SACIqD,M,uBC3DEwhB,GAPG,CACf,mBAAsB,YACtB,6BAAgC,iDAChC,mBAAsB,YACtB,kBAAqB,sBACrB,6BAAgC,8BCHtBC,GAAqB,CAC/BlkB,KAAM,WACN8iB,OAAQ,CACLc,OAAQ,CACLO,KAAM,CACH9D,QAAS,CAACjX,MAAOoL,QAGvBuP,WAAY,CACT9C,OAAQ,CAELtW,WAAY,CAACvB,MAAO,6BAEpBiX,QAAS,CACNjhB,gBAAiB,CAACgK,MAAOoL,MACzB4P,OAAQ,CACLhlB,gBAAiB,CAACgK,MAAO,aAG/Bgb,OAAQ,CACLhlB,gBAAiB,CAACgK,MAAO,2BAE5Bib,OAAQ,CACLjlB,gBAAiB,CAACgK,MAAO,2BAE5Bkb,QAAS,CACNllB,gBAAiB,CAACgK,MAAO,+BCPlCpK,GAAYC,IACf,CACGslB,WAAY,CACT3e,OAAO,QACPoI,SAAU,SACV5O,gBAAiB,UACjB,UAAW,CACRwG,OAAQ,UAIjB,CAAC5F,KAAM,cAGJwkB,GAA6EC,GACnFC,WAAQC,UAAUH,IAClBE,WAAQC,UAAU,CACfC,QAAS,CACNC,OAAQxP,IACRyP,OAAQ,YACRC,aAAc,CACXC,OAAQ,GACRC,UAAW,GACXC,QAAS,KAGfC,UAAW,CAERC,UAAU,KAIhB,IAAMC,GAAU,CACbC,OAAQ,CACLC,IAAK,CACF/jB,MAAO,WACPgkB,SAAU,SAYJ,SAASC,KACrB,IAAMvlB,EAAUlB,KADW,EAEKmB,mBAAS,IAFd,mBAEpBulB,EAFoB,KAEVC,EAFU,KAU3B,OANA9kB,qBAAU,WACP,gCAA2B+kB,MAAK,SAACF,GAC9BC,EAAYD,EAAS5nB,cAExB,IAECsK,OAAOC,KAAKqd,GAAU9mB,OAAS,EAE7B,cAAC,WAAD,CAAUqG,SAAU,cAACC,EAAA,EAAD,CAASC,WAAS,IAAtC,SACG,cAAC,EAAD,UACG,cAAC,IAAD,CAAcugB,SAAUA,EAAUG,OAAQ,KAAMR,QAASA,GAAzD,SACG,cAACjgB,EAAA,EAAD,UACG,cAAC0a,EAAA,EAAD,UACG,qBAAKzd,UAAWnC,EAAQqkB,WAAxB,SACG,cAACT,GAAD,CAAkB5kB,MAAOglB,GAAzB,SACI,SAACxT,GAAD,OACE,eAACD,EAAA,EAAD,CAAmBC,UAAWA,EAA9B,UACG,cAACnL,EAAA,EAAD,IACA,cAACnC,GAAA,EAAD,sBAYvB,K,WC3FE0iB,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,gCAAqBJ,MAAK,YAAkD,IAA/CK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCuBRO,GAAY,IAAIC,IAahBC,GAAWC,YAAU,uCAAC,WAAOC,EAAP,oBAAAle,EAAA,6DAAWme,EAAX,EAAWA,QAAX,SAVlBC,IAAKC,iBACRjB,MAAK,SAACkB,GACJ,OAAOA,EAAQC,YAAYC,YAE7BC,OAAM,SAAC3nB,GAEL,MADA0K,QAAQC,IAAI3K,GACNA,KAIa,cACrB4nB,EADqB,yBAGlB,CACJP,QAAQ,2BACFA,GADC,IAEJQ,YAAaD,GAAS,OANH,2CAAD,yDAWrBE,GAAS,IAAIC,IAAa,CAC7BC,KAAMC,IAAWC,KAAK,CAAClB,GAAWE,GAAU,IAAIiB,IAAS,CAACC,IAAK7S,QAC/D8S,MAAO,IAAIC,MAITC,OAAOC,UAAUC,SAEnBF,OAAOC,UAAUC,OAAS,SAAUrnB,GACjC,OAAO4hB,KAAK3d,QAAQ,YAAY,SAAU4F,EAAO1M,GAC9C,MAA8B,qBAAhB6C,EAAO7C,GAAuB6C,EAAO7C,GAAO0M,OAYnEyd,IAASjiB,OACN,cAACkiB,EAAA,EAAD,CAAaC,QAASC,IAAtB,SACG,cAAC,IAAD,UACG,cAACC,EAAA,EAAD,CAAgBhB,OAAQA,GAAxB,SACG,cAAC,IAAD,UACG,cAAC,GAAD,YAKZpb,SAASqc,eAAe,SAM3BvC,O","file":"static/js/main.40b66052.chunk.js","sourcesContent":["import without from 'lodash/without';\nimport {useMemo} from 'react';\nimport {useCallback} from 'react';\nimport {atom, useRecoilState} from 'recoil';\n\nexport const progressState = atom({\n   key: 'progressState',\n   default: false,\n});\nexport const progressGlobal = atom({\n   key: 'progressGlobal',\n   default: true,\n});\n\nlet progressList = [];\n\n/**\n * Hook to call onClose when escape is pressed, and onSubmit when the enter key is pressed.\n */\nexport default function useProgress(uniqueId) {\n\n   const [progressValue, setProgressState] = useRecoilState(progressState);\n\n   const setProgress = useCallback((progress) => {\n      if (progress) {\n         if (progressList.indexOf(uniqueId) < 0 ) {\n            const newProgress = progressList.push(uniqueId) > 0;\n            setProgressState(newProgress);\n         }\n      } else if (progressList?.length > 0) {\n         const list = without(progressList, uniqueId);\n         if (progressList?.length !== list.length) {\n            const newProgress = list.length > 0;\n            progressList = list;\n            setProgressState(newProgress);\n         }\n      }\n   }, [setProgressState, uniqueId]);\n\n   return useMemo(() => [progressValue, setProgress], [setProgress, progressValue]);\n}\n","import Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport PropTypes from 'prop-types';\nimport React, {useEffect, useState} from 'react';\nimport {useRecoilValue} from 'recoil';\nimport {errorState} from '../../pages/Main';\nimport Typography from './Typography';\n\nconst useStyles = makeStyles(\n   (theme) => ({\n      errorMessage: {\n         backgroundColor: `${theme.palette.error.light} !important`,\n         paddingRight: theme.spacing(6),\n      },\n      closeButtonStyle: {\n         position: 'absolute',\n         right: 0,\n         top: 0,\n         marginLeft: 'auto',\n         zIndex: 1001,\n      },\n   }),\n   {name: 'ErrorSnackbarStyles'}\n);\n\nErrorSnackbar.propTypes = {\n   open: PropTypes.bool,\n   enableRefresh: PropTypes.bool,\n   onClose: PropTypes.func,\n   messageKey: PropTypes.string,\n   message: PropTypes.string,\n   values: PropTypes.object,\n};\n\n/**\n * Component to show the error messages.\n *\n * Note:\n *    Message is the default property in values.\n *\n * Reviewed:\n *\n * @param open Indicates if the Error snackbar should be shown to the user.\n * @param onClose Callback when the snackbar is closed.\n * @param messageKey Intl ID for the error message.\n * @param values Value object for the error message.\n * @param message Text for the error message.\n * @param enableRefresh Indicates if the Refresh action should be shown / enabled.\n * @param error The error that occurred.\n * @param errorInfo The errorInfo for the error that occurred.\n * @return {JSX.Element}\n * @constructor\n */\nexport default function ErrorSnackbar() {\n   const classes = useStyles();\n   const [open, setOpen] = useState(false);\n\n   const errorStateValue = useRecoilValue(errorState);\n   const {error, errorKey, errorMessage, values, enableRefresh, errorInfo} = errorStateValue;\n\n   useEffect(() => {\n      if (errorStateValue && (error || errorKey)) {\n         setOpen(true);\n      }\n   }, [errorStateValue, error]);\n\n   /**\n    * Force a browser reload.\n    */\n   const handleRefresh = () => {\n      window.location.reload();\n   };\n\n   const handleClose = (event) => {\n      setOpen(false);\n   };\n\n   return (\n      <Snackbar\n         open={open}\n         anchorOrigin={{vertical: 'top', horizontal: 'center'}}\n         ContentProps={{\n            'aria-describedby': 'message-id',\n            classes: {\n               root: classes.errorMessage,\n            },\n         }}\n         message={\n            <>\n               <Typography id={errorKey} values={values} color={'inherit'}>\n                  {errorMessage}\n               </Typography>\n               {(error || errorInfo) && (\n                  <details style={{whiteSpace: 'pre-wrap'}}>\n                     {error?.toString()}\n                     <br />\n                     {errorInfo?.componentStack}\n                  </details>\n               )}\n            </>\n         }\n         action={[\n            enableRefresh && (\n               <Button key='undo' color='inherit' size='small' onClick={handleRefresh}>\n                  <Typography color='inherit' id='refresh'>\n                     Refresh\n                  </Typography>\n               </Button>\n            ),\n            <IconButton\n               key='close'\n               aria-label='Close'\n               color='inherit'\n               className={classes.closeButtonStyle}\n               onClick={handleClose}\n            >\n               <CloseIcon />\n            </IconButton>,\n         ]}\n      />\n   );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Redirect, Route} from 'react-router-dom';\n\n/**\n * Route that is protected by hasPrivilege. Redirects to the base URL ('/') if no privilege.\n *\n * @param hasPrivilege Indicates if the user has the privilege for the route.\n * @param children The children elements.\n * @param rest The other props.\n * @return {JSX.Element} The element to use based on privilege.\n * @constructor\n */\nexport default function PrivilegeRoute({hasPrivilege, children, ...rest}) {\n   if (hasPrivilege) {\n      return <Route {...rest}>{children}</Route>\n   }\n   return <Redirect to='/'/>\n}\n\nPrivilegeRoute.propTypes = {\n   hasPrivilege: PropTypes.bool.isRequired,  //Function that returns true if the user can access the route.\n};\n","import CssBaseline from '@material-ui/core/CssBaseline';\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport StylesProvider from '@material-ui/styles/StylesProvider';\nimport {useState} from 'react';\nimport React, {Suspense, lazy} from 'react';\nimport {useRouteMatch} from 'react-router-dom';\nimport {useHistory} from 'react-router-dom';\nimport {Route} from 'react-router-dom';\nimport {Redirect} from 'react-router-dom';\nimport {useRecoilValue} from 'recoil';\nimport {LOAN_ANALYSIS_PATH} from '../Constants';\nimport {CLIENT_ENTITY_DASHBOARD_PATH} from '../Constants';\nimport {APPBAR_HEIGHT} from '../Constants';\nimport {CLIENT_DASHBOARD_PATH} from '../Constants';\nimport {ADMIN_PATH} from '../Constants';\nimport {DEFAULT_PATH} from '../Constants';\nimport {ADMIN_SETUP_PATH} from '../Constants';\nimport {USER_CLIENT_QUERY} from '../data/QueriesGL';\nimport Loading from '../fhg/components/Loading';\nimport ProgressIndicator from '../fhg/components/ProgressIndicator';\nimport ErrorStateSnackbar from '../fhg/components/ErrorStateSnackbar';\nimport {authenticationDataStatus} from '../fhg/components/security/AuthenticatedUser';\nimport useLazyQueryFHG from '../fhg/hooks/data/useLazyQueryFHG';\nimport {useEffect} from 'react';\nimport PrivilegeRoute from '../fhg/security/PrivilegeRoute';\nimport {Switch} from 'react-router-dom';\nimport {atom} from 'recoil';\n\nconst AdminMain = lazy(() => import('./admin/AdminMain'));\nconst ClientMain = lazy(() => import('./client/ClientMain'));\nconst WebAppBarLF = lazy(() => import('../components/WebAppBarLF'));\n\nexport const userRoleState = atom({\n   key: 'userRole',\n   default: {isClient: false, isAdmin: false},\n});\n\nexport const errorState = atom({\n   key: 'error',\n   default: {\n      errorKey: undefined,\n      errorMessage: undefined,\n      errorInfo: undefined,\n      error: undefined,\n      values: undefined,\n      enableRefresh: true,\n   },\n});\n\n/**\n * Main component accessible only if the user has been authenticated. Contains the routing for the application.\n *\n * Reviewed: 5/28/21\n */\nexport default function Main() {\n   const userRole = useRecoilValue(userRoleState);\n   const authDataState = useRecoilValue(authenticationDataStatus);\n   const [clientId, setClientId] = useState();\n   const history = useHistory();\n   const routeMatch = useRouteMatch({path: CLIENT_ENTITY_DASHBOARD_PATH, strict: false, sensitive: true});\n\n   const [loadData, {data}] = useLazyQueryFHG(USER_CLIENT_QUERY, undefined, 'user.type');\n\n   const {isAdmin, isClient} = userRole;\n\n   useEffect(() => {\n      if (!isAdmin && clientId && routeMatch?.params?.clientId && clientId !== routeMatch?.params?.clientId) {\n         localStorage.entityId = ' ';\n         let defaultPath = LOAN_ANALYSIS_PATH.replace(':clientId', clientId).replace(\n            ':entityId',\n            localStorage.entityId\n         );\n         history.replace(defaultPath);\n      }\n   }, [clientId, history, isAdmin, routeMatch?.params?.clientId]);\n\n   useEffect(() => {\n      if (authDataState?.cognitoSub && isClient) {\n         loadData({variables: {cognitoSub: authDataState.cognitoSub}});\n      }\n   }, [authDataState, isClient, loadData]);\n\n   useEffect(() => {\n      if (data) {\n         const user = data?.users?.[0] || {};\n         setClientId(user.clientId);\n      }\n   }, [data]);\n\n   if (isAdmin || (isClient && clientId)) {\n      let defaultPath = isAdmin\n         ? ADMIN_PATH\n         : LOAN_ANALYSIS_PATH.replace(':clientId', clientId).replace(':entityId', localStorage.entityId);\n\n      return (\n         <Suspense fallback={<Loading isLoading />}>\n            <StylesProvider>\n               <MuiPickersUtilsProvider utils={MomentUtils}>\n                  <CssBaseline />\n                  <ProgressIndicator isGlobal={true} />\n                  <ErrorStateSnackbar />\n                  <PrivilegeRoute\n                     hasPrivilege={isClient || isAdmin}\n                     path={[CLIENT_ENTITY_DASHBOARD_PATH, CLIENT_DASHBOARD_PATH, ADMIN_SETUP_PATH]}\n                  >\n                     <WebAppBarLF />\n                  </PrivilegeRoute>\n                  <main style={{height: `calc(100% - ${APPBAR_HEIGHT}px`}}>\n                     <Switch>\n                        <PrivilegeRoute hasPrivilege={isClient || isAdmin} path={CLIENT_DASHBOARD_PATH}>\n                           <ClientMain />\n                        </PrivilegeRoute>\n                        <PrivilegeRoute hasPrivilege={isAdmin} path={ADMIN_SETUP_PATH}>\n                           <AdminMain />\n                        </PrivilegeRoute>\n                        <Route path={DEFAULT_PATH} render={() => <Redirect to={defaultPath} />} />\n                     </Switch>\n                  </main>\n               </MuiPickersUtilsProvider>\n            </StylesProvider>\n         </Suspense>\n      );\n   } else {\n      return null;\n   }\n}\n","import Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, FormattedNumber} from 'react-intl';\nimport Grid from './Grid';\n\n/**\n * The Typography component that supports intl. The default value is the child element. The id is the lookup value for\n * the locale file.\n *\n * Example:\n * <Typography id='path.suppliers' variant='button'>Suppliers</Typography>\n *\n * Reviewed:\n */\nconst TypographyFHG = ({id, children, values, type = 'text', hasBold, intlProps, hasLineBreaks, ...otherProps}) => {\n   if (values && (hasBold || values.hasBold)) {\n      values.b = (...chunks) => <b>{chunks}</b>;\n   }\n\n   function linesToParagraphs(nodes) {\n      return nodes\n         .map((node) => (typeof node === 'string' ? node.split('\\n').map((text) => <p>{text}</p>) : node))\n         .reduce((nodes, node) => nodes.concat(node), []);\n   }\n\n   if (id) {\n      if (type === 'number') {\n         return (\n            <Typography id={id} {...otherProps}>\n               <FormattedNumber id={id} defaultMessage={children} values={values} {...intlProps} />\n            </Typography>\n         );\n      }\n      return (\n         <Typography id={id} {...otherProps}>\n            {children ? (\n               <Grid container alignItems={'center'} resizable={false} justify={'center'}>\n                  <Grid item>\n                     <FormattedMessage id={id} defaultMessage={children} values={values} {...intlProps}>\n                        {hasLineBreaks ? linesToParagraphs : undefined}\n                     </FormattedMessage>\n                  </Grid>\n                  <Grid item>{children}</Grid>\n               </Grid>\n            ) : (\n               <FormattedMessage id={id} defaultMessage={children} values={values} {...intlProps}>\n                  {hasLineBreaks ? linesToParagraphs : undefined}\n               </FormattedMessage>\n            )}\n         </Typography>\n      );\n   } else {\n      return <Typography {...otherProps}>{children}</Typography>;\n   }\n};\n\n// noinspection JSUnresolvedVariable\nTypographyFHG.propTypes = {\n   id: PropTypes.string, // Key to message in the localization file.\n   values: PropTypes.object, // Values to use to fill parameters in the localized message.\n   ...Typography.propTypes, // Supports all the properties from Typography.\n};\n\nTypographyFHG.defaultProps = {\n   variant: 'inherit',\n};\nTypographyFHG.displayName = 'TypographyFHG';\n\nexport default TypographyFHG;\n","import match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport {indexOf} from 'lodash';\n// import compact from 'lodash/compact';\nimport isArray from 'lodash/isArray';\nimport isNil from 'lodash/isNil';\nimport {isNaN} from 'lodash/lang';\n// import forOwn from 'lodash/forOwn';\nimport _toNumber from 'lodash/toNumber';\n// import castArray from 'lodash/castArray';\nimport get from 'lodash/get';\n// import isEqual from 'lodash/isEqual';\nimport isObjectLike from 'lodash/isObjectLike';\n// import moment from 'moment';\nimport React from 'react';\n// import {DATE_DB_FORMAT} from '../../Constants';\n\n/**\n * Format the message for localization. The default message has the id appended in non-production versions.\n *\n * @param intl             // Intl for localization.\n * @param id               // Message ID from localization file.\n * @param defaultMessage   // Default message to use if id cannot be found in localization file.\n * @param values           // Values to insert in the localized message.\n * @return {string}        // Localized message.\n */\nexport function formatMessage(intl, id, defaultMessage, values) {\n   const newDefaultMessage = process.env.NODE_ENV === 'production' ? defaultMessage : `${defaultMessage} (${id})`;\n\n   if (id) {\n      return intl ? intl.formatMessage({id, defaultMessage: newDefaultMessage}, values) : newDefaultMessage;\n   } else {\n      return '';\n   }\n}\n\n// /**\n//  * Converts any boolean type string to a boolean value.\n//  * @param string The string to convert.\n//  * @return {*} The boolean value or the original string if the string wasn't a boolean type string.\n//  */\n// export const stringToBoolean = (string) => {\n//    if (string) {\n//       switch (string.toLocaleLowerCase().trim()) {\n//          case 'true':\n//          case 'yes':\n//             return true;\n//          case 'false':\n//          case 'no':\n//             return false;\n//          default:\n//             return string;\n//       }\n//    } else {\n//       return string;\n//    }\n// };\n//\n// /**\n//  * b64 encoding for a string containing unicode characters.\n//  * @param str The string to encode.\n//  * @return {string} The encoded string.\n//  */\n// export function b64EncodeUnicode(str) {\n//    // first we use encodeURIComponent to get percent-encoded UTF-8,\n//    // then we convert the percent encodings into raw bytes which\n//    // can be fed into btoa.\n//    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,\n//       function toSolidBytes(match, p1) {\n//          return String.fromCharCode('0x' + p1);\n//       }));\n// }\n//\n// /**\n//  * Sorts the dates using date-fns.\n//  * @param a\n//  * @param b\n//  * @return {number}\n//  */\n// export const sortDate = (a, b) => {\n//    if (a === b) {\n//       return 0;\n//    }\n//    if (a === undefined || b === undefined) {\n//       return (a === undefined) ? -1 : 1;\n//    }\n//    const aMoment = moment(a);\n//    const bMoment = moment(b);\n//\n//    if (aMoment.isSame(bMoment)) {\n//       return 0;\n//    }\n//    return aMoment.isAfter(bMoment) ? 1 : -1;\n// };\n//\n// /**\n//  * Sorts the dates firestore timestamp objects.\n//  * @param a\n//  * @param b\n//  * @return {number}\n//  */\n// export const sortTimestamp = (a, b) => {\n//\n//    if (isEqual(a, b)) {\n//       return 0;\n//    }\n//    if (a === undefined || b === undefined) {\n//       return a === undefined ? -1 : 1;\n//    }\n//    return ((a.seconds > b.seconds) || ((a.seconds === b.seconds) && (a.nanoseconds > b.nanoseconds))) ? 1 : -1\n//\n// };\n//\nexport function removeOne(array, index) {\n   if (index >= 0 && array && array.length) {\n      let len = array.length;\n      if (!len) {\n         return;\n      }\n      len -= 1;\n      while (index < len) {\n         array[index] = array[index + 1];\n         index++;\n      }\n      array.length--;\n   }\n   return array;\n}\n\n// export const emptyFunction = () => {};\n//\n// export function isFullScreenMode() {\n//    return document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen || window.innerHeight ===\n//       window.screen.height;\n// }\n//\n// export function isMobileDevice() {\n//    let check = false;\n//    (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n//    return check;\n// }\n//\n/**\n * Determines if the item has a value (i.e. not undefined, not null, nor empty string).\n *\n * @param item The item to check.\n * @return {boolean} True if the item is not undefined, not null, and not the empty string.\n */\nexport function hasValue(item) {\n   return (\n      !isNil(item) &&\n      item !== '' &&\n      (!isArray(item) || item.length > 0) &&\n      (!isObjectLike(item) || Object.keys(item).length > 0)\n   );\n}\n\n// /**\n//  * Determines if the item has a value (i.e. not undefined, not null, nor empty string).\n//  *\n//  * @param item The item to check.\n//  * @return {boolean} True if the item is not undefined, not null, and not the empty string.\n//  */\n// export function hasElements(item, path) {\n//    const array = path ? get(item, path) : item;\n//    return (isArray(array) && array.length > 0);\n// }\n//\n// /**\n//  * If items both have values and they are equal or if they both don'have values, they are equivalent.\n//  * @param item1 First item to check\n//  * @param item2 Second item to check.\n//  * @return {boolean} True if the two items have the same value or both don't have a value.\n//  */\n// export function isEquivalent(item1, item2) {\n//    return (!hasValue(item1) && !hasValue(item2)) || isEqual(item1, item2);\n// }\n//\n// /**\n//  * Get an object with the property set to the changed value or undefined, if the property hasn't changed.\n//  *\n//  * @param changedItem The possibly changed object to compare properties.\n//  * @param originalItem The original object to compare properties.\n//  * @param changedProperty The property of the changed item to compare.\n//  * @param originalProperty The property of the original item to compare.\n//  * @param isCompactArray True to compact the array type properties.\n//  * @return {boolean|{}} The new object with the property set if changed, or undefined if not changed.\n//  */\n// export function getChangedProperty(changedItem, originalItem, changedProperty, originalProperty,\n//    isCompactArray = false) {\n//    originalProperty = originalProperty || changedProperty;\n//    const changedItemProperty = isCompactArray && isArray(changedItem[changedProperty]) ?\n//       compact(changedItem[changedProperty]) : changedItem[changedProperty];\n//    return !isEquivalent(changedItemProperty, originalItem[originalProperty]) &&\n//       {[originalProperty]: changedItemProperty};\n// }\n//\n// /**\n//  * Get an object with the property set to the changed value or undefined, if the property hasn't changed. The changed\n//  * property is passed directly instead of as part of an object for getChangedProperty.\n//  *\n//  * @param changedProperty The possibly changed property to compare.\n//  * @param originalItem The original object to compare properties.\n//  * @param originalProperty The property of the original item to compare.\n//  * @return {boolean|{}} The new object with the property set if changed, or undefined if not changed.\n//  */\n// export function getCustomChanged(changedProperty, originalItem, originalProperty) {\n//    return !isEquivalent(changedProperty, originalItem[originalProperty]) && {[originalProperty]: changedProperty};\n// }\n//\n// /**\n//  * Get an object with all the properties set to the changed properties. Only changed properties will be in the returned\n//  * object.\n//  *\n//  * @param changedItem The possibly changed object to compare properties.\n//  * @param originalItem The original object to compare properties.\n//  * @param changedProperties The list of properties of the changed item to compare.\n//  * @param convertCallback The function to convert from the view value to the save object type.\n//  * @param mapChangedPropertiesToOriginal The mapping from changed property names to original properties. For example:\n//  *    {\n//  *       changedItemPropertyName: 'originalProperyName',\n//  *       changedItemPropertyName2: 'originalProperyName2',\n//  *    }\n//  */\n// export function getChangedObject(changedItem, originalItem, changedProperties, convertCallback,\n//    mapChangedPropertiesToOriginal = {}) {\n//    const changed = {};\n//    for (const property of changedProperties) {\n//       const originalProperty = mapChangedPropertiesToOriginal[property] || property;\n//       const changedField = getChangedProperty(changedItem, originalItem, property, originalProperty);\n//       if (changedField) {\n//          changed[originalProperty] = convertCallback ? convertCallback(changedItem[property]) : changedItem[property];\n//       }\n//    }\n//    return changed;\n// }\n//\n// export function hasOwnToObject(object) {\n//    const result = {};\n//\n//    forOwn(object, function (value, key) {\n//       if (key !== 'undefined') {\n//          result[key] = value;\n//       }\n//    });\n//\n//    return result;\n// }\n//\n// export function blobToBase64(blob) {\n//    return new Promise(async (resolve, reject) => {\n//       var reader = new FileReader();\n//       reader.onload = function () {\n//          var dataUrl = reader.result;\n//          var base64 = dataUrl.split(',')[1];\n//          resolve(base64);\n//       };\n//       reader.onerror = function (error) {\n//          reject(error);\n//       };\n//       reader.readAsDataURL(blob);\n//    });\n// }\n//\n// export function dataURItoBlob(dataURI) {\n//    // convert base64 to raw binary data held in a string\n//    // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n//    var byteString = atob(dataURI.split(',')[1]);\n//\n//    // separate out the mime component\n//    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]\n//\n//    // write the bytes of the string to an ArrayBuffer\n//    var ab = new ArrayBuffer(byteString.length);\n//\n//    // create a view into the buffer\n//    var ia = new Uint8Array(ab);\n//\n//    // set the bytes of the buffer to the correct values\n//    for (var i = 0; i < byteString.length; i++) {\n//       ia[i] = byteString.charCodeAt(i);\n//    }\n//\n//    // write the ArrayBuffer to a blob, and you're done\n//    var blob = new Blob([ab], {type: mimeString});\n//    return blob;\n//\n// }\n//\n// export async function fetchData(url = '', method = 'GET', data) {\n//    const response = await fetch(url, {\n//       method,\n//       headers: {\n//          // 'x-api-key': 'AIzaSyA35411U4UavTPdKVW-HTbY8HWvdny_QSA',\n//          'Content-Type': 'application/json',\n//       },\n//       body: method !== 'GET' && data ? JSON.stringify(data) : undefined,\n//    });\n//    return response.json(); // parses JSON response into native JavaScript objects\n// }\n\nexport const getBase64FromUrl = async (url) => {\n   const data = await fetch(url);\n   const blob = await data.blob();\n   return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      reader.onloadend = () => {\n         const base64data = reader.result;\n         resolve(base64data);\n      };\n   });\n};\n\nexport const editChange = (event, value, reason, isComponent = true, newValue, name) => {\n   let nextValue;\n   let componentName = name;\n\n   if (newValue === undefined) {\n      if (value && (reason === 'blur' || reason === 'create-option' || reason === 'select-option')) {\n         nextValue = typeof value === 'string' ? value : value.id;\n         componentName =\n            name ||\n            get(event, 'target.parentElement.dataset.optionname') ||\n            get(event, 'target.firstElementChild.dataset.optionname') ||\n            event.target.name;\n      } else if (value && reason === 'date-picker') {\n         nextValue = value;\n         componentName = event.target.name;\n      } else {\n         if (event && event.target) {\n            switch (event.target.type) {\n               case 'number':\n                  nextValue = event.target.valueAsNumber;\n                  break;\n               case 'checkbox':\n                  nextValue = event.target.checked;\n                  break;\n               case 'date-range':\n                  nextValue = event.target.date;\n                  break;\n               case 'react-select':\n                  nextValue = event.target.value;\n                  break;\n               case 'react-number-format':\n                  nextValue = toNumber(event.target.value);\n                  break;\n               default:\n                  const type = get(event, 'target.dataset.type');\n                  if (type === 'number') {\n                     nextValue = toNumber(event.target.value);\n                  } else {\n                     nextValue = event.target.value;\n                  }\n                  break;\n            }\n            componentName = event.target.name;\n         } else {\n            console.log('event.target is null');\n         }\n      }\n   }\n\n   if (newValue) {\n      return isComponent ? newValue : {componentName, newValue: newValue[name]};\n   } else if (isComponent) {\n      return {[componentName]: nextValue};\n   }\n   return {componentName, newValue: nextValue};\n};\n\n// export const renderOptions = (option, {inputValue}) => {\n//    if (!option) {\n//       return 'Untitled';\n//    }\n//    const matches = match(option, inputValue);\n//    const parts = parse(option, matches);\n//\n//    return (\n//       <div>\n//          {parts.map((part, index) => (\n//             <span key={index} style={{fontWeight: part.highlight ? 700 : 400}}>\n//                                     {part.text}\n//                                  </span>\n//          ))}\n//       </div>\n//    );\n// };\n//\n// export const renderOptionsName = (option, {inputValue}) => {\n//    if (option.name === null) {\n//       return 'Untitled';\n//    }\n//    const matches = match(option.name, inputValue);\n//    const parts = parse(option.name, matches);\n//\n//    return (\n//       <div>\n//          {parts.map((part, index) => (\n//             <span key={index} style={{fontWeight: part.highlight ? 700 : 400}}>\n//                                     {part.text}\n//                                  </span>\n//          ))}\n//       </div>\n//    );\n// };\n\nexport const renderOptionsKey =\n   (name) =>\n   (option, {inputValue}) => {\n      const useOption = typeof option === 'string' ? option : option[name];\n      if (useOption === null) {\n         return 'Untitled';\n      }\n\n      const matches = match(useOption, inputValue);\n      const parts = parse(useOption, matches);\n\n      return (\n         <div>\n            {parts.map((part, index) => {\n               if (part.text) {\n                  return (\n                     <span key={index} style={{fontWeight: part.highlight ? 700 : 400}}>\n                        {part.text}\n                     </span>\n                  );\n               } else {\n                  return (\n                     <span key={index} style={{fontWeight: 400, color: '#A6A6A6'}}>\n                        Untitled\n                     </span>\n                  );\n               }\n            })}\n         </div>\n      );\n   };\n\n/**\n * Convert the fileUpload into the api call to get the file.\n * @param fileUpload The fileUpload to convert.\n *\n * @return {string|undefined|*} The relative file location.\n */\nexport const convertImageToWrapper = (fileUpload) => {\n   if (fileUpload) {\n      return `/file?id=${fileUpload.id}`;\n   }\n   return undefined;\n};\n\nexport function toNumber(value, isAllowBlank = true) {\n   if (value === null || value === undefined || (isAllowBlank && value === '')) {\n      return null;\n   } else {\n      return _toNumber(value);\n   }\n}\n\nexport function toNumberIfString(value, isAllowBlank = true) {\n   const result = toNumber(value, isAllowBlank);\n   return isNaN(result) ? value : result;\n}\n\n// export const areDatesValid = dates => {\n//    const checkDates = compact(castArray(dates));\n//\n//    //There need to be 1 or 2 dates, 0 or less and greater than 2 dates are not valid.\n//    if (checkDates.length <= 0 || checkDates.length > 2) {\n//       return false;\n//    }\n//    for (const date of checkDates) {\n//       if (date) {\n//          if (!date.isValid || !date.isValid()) {\n//             return false;\n//          }\n//       }\n//    }\n//    return true;\n// }\n//\n// /**\n//  * Get arrays of days in the ranges of the date range list of records.\n//  *\n//  * @param dateRangeList The list of date range records.\n//  * @return {[]} The array of  days.\n//  */\n// export const getDays = (dateRangeList,\n//    {startField = 'startDate', endField = 'endDate'} = {startField: 'startDate', endField: 'endDate'}) => {\n//    const days = [];\n//\n//    for (const dateRange of dateRangeList) {\n//       const firstDay = moment(dateRange[startField]);\n//       const lastDay = moment(dateRange[endField]);\n//       days.push(dateRange[startField]);\n//       let currentDay = moment(firstDay).add(1, 'day');\n//       while (currentDay.isSameOrBefore(lastDay)) {\n//          days.push(currentDay.format(DATE_DB_FORMAT));\n//          currentDay = moment(currentDay).add(1, 'day');\n//       }\n//    }\n//    return days;\n// };\n\nexport function resultOf(item, argument, defaultItem) {\n   let result = typeof item === 'function' ? item(argument) : item;\n\n   return result || defaultItem;\n}\n\nexport function stringAvatar(name, style = {}) {\n   if (name) {\n      return {\n         style: {\n            backgroundColor: '#000',\n            color: '#fff',\n            width: 35,\n            height: 35,\n            marginRight: 8,\n            ...style,\n         },\n         children: `${name.split(' ')[0][0]}${name.split(' ')?.[1]?.[0] || ''}`,\n      };\n   }\n   return {style};\n}\n\nexport function findById(array = [], idList = []) {\n   const result = [];\n\n   for (const arrayElement of array) {\n      const index = indexOf(idList, arrayElement?.id);\n      if (index >= 0) {\n         result.push(arrayElement);\n      }\n   }\n   return result;\n}\n\nexport function showFile(title, blob, type = 'pdf') {\n   // It is necessary to create a new blob object with mime-type explicitly set\n   // otherwise only Chrome works like it should\n   var newBlob = blob; //new Blob([blob], {type: \"application/pdf\"})\n\n   // IE doesn't allow using a blob object directly as link href\n   // instead it is necessary to use msSaveOrOpenBlob\n   if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(newBlob, `${title}.${type}`);\n      return;\n   }\n\n   // For other browsers:\n   // Create a link pointing to the ObjectURL containing the blob.\n   const data = window.URL.createObjectURL(newBlob);\n   var link = document.createElement('a');\n   link.href = data;\n   link.target = '_blank';\n   link.download = `${title}.${type}`;\n\n   document.body.appendChild(link);\n   link.click();\n\n   link.parentNode.removeChild(link);\n}\n\nexport function downloadBlob(blob, filename) {\n   const url = URL.createObjectURL(blob);\n   const a = document.createElement('a');\n   a.href = url;\n   a.download = filename || 'download';\n   const clickHandler = () => {\n      setTimeout(() => {\n         URL.revokeObjectURL(url);\n         a.removeEventListener('click', clickHandler);\n      }, 150);\n   };\n   a.addEventListener('click', clickHandler, false);\n   a.click();\n   return a;\n}\n\nexport function humanFileSize(bytes, si = false, dp = 1) {\n   const thresh = si ? 1000 : 1024;\n\n   if (Math.abs(bytes) < thresh) {\n      if (bytes <= 1) {\n         return '-';\n      }\n      return bytes + ' bytes';\n   }\n\n   const units = si\n      ? ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n      : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n   let u = -1;\n   const r = 10 ** dp;\n\n   do {\n      bytes /= thresh;\n      ++u;\n   } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);\n\n   return bytes.toFixed(dp) + ' ' + units[u];\n}\n\nexport function getExtension(name) {\n   if (name) {\n      const lastIndex = name.lastIndexOf('.');\n      if (lastIndex >= 0) {\n         return name.substring(lastIndex + 1);\n      }\n   }\n   return '';\n}\n\nexport function getExtensionIcon(extension) {\n   return 'fiv-sqo fiv-icon-' + extension;\n}\n\nexport function escapeRegExp(string) {\n   return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import MuiGrid from '@material-ui/core/Grid/Grid';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport debounce from 'lodash/debounce';\nimport * as PropTypes from 'prop-types';\nimport React, {useRef, useEffect, useState, useCallback, forwardRef} from 'react';\n\nconst useStyles = makeStyles(\n   {\n      gridStyle: (props) => {\n         return {\n            overflow: props.overflow,\n            height: props.fullHeight === true ? '100%' : props.fullHeight === false ? 'unset' : undefined,\n            width: props.fullWidth === true ? '100%' : props.fullWidth === false ? 'unset' : undefined,\n            flex: props.flex\n               ? props.flex\n               : props.resizable\n               ? '1 1'\n               : props.resizable === false\n               ? '0 0 auto'\n               : undefined,\n         };\n      },\n      innerGridStyle: (props) => {\n         return {\n            overflow: props.overflow,\n            height: props.fullHeight === true ? '100%' : props.fullHeight === false ? 'unset' : undefined,\n            width: '100%',\n            flex: props.flex\n               ? props.flex\n               : props.resizable\n               ? '1 1'\n               : props.resizable === false\n               ? '0 0 auto'\n               : undefined,\n         };\n      },\n   },\n   {name: 'gridStyles'}\n);\n\nconst Grid = forwardRef(\n   /**\n    * The Grid component that supports overflow as a property.\n    *\n    * Example:\n    * <Grid overflow='auto' fullWidth resizable>...</Grid>\n    * @augments MuiGrid\n    * @param name,\n    * @param overflow,\n    * @param fullWidth,\n    * @param flex,\n    * @param resizeable,\n    * @param children,\n    * @param className,\n    * @param resizable,\n    * @param fullHeight,\n    * @param item,\n    * @param container,\n    * @param spacing,\n    * @param justify,\n    * @param alignItems,\n    * @param alignContent,\n    * @param isScrollable,\n    * @param isAddScrollPadding=true,\n    * @param innerStyle,\n    * @param otherProps\n    *\n    * Reviewed:\n    */\n   function Grid(props, ref) {\n      const {\n         name,\n         overflow,\n         fullWidth,\n         flex,\n         resizeable,\n         children,\n         className,\n         resizable,\n         fullHeight,\n         item,\n         container,\n         spacing,\n         justify,\n         alignItems,\n         alignContent,\n         isScrollable,\n         isAddScrollPadding = true,\n         innerStyle,\n         direction,\n         wrap,\n         ...otherProps\n      } = props;\n      // const isScrollable = false\n      const adjustedProps = {...props};\n      adjustedProps.fullHeight = isScrollable ? true : props.fullHeight;\n      adjustedProps.overflow = isScrollable ? 'auto' : props.overflow;\n\n      const theme = useTheme();\n      const mainRef = useRef();\n      const classes = useStyles(adjustedProps);\n      const [isVerticalScroll, setIsVerticalScroll] = useState();\n\n      const checkIsScrolling = useCallback(() => {\n         if (mainRef.current && isScrollable) {\n            const isVerticalScrolling = mainRef.current.scrollHeight > mainRef.current.clientHeight;\n            setIsVerticalScroll(isVerticalScrolling);\n         }\n      }, [mainRef, isScrollable]);\n\n      // Debounce the scroll size check.\n      const handleResizeDebounced = useRef(debounce(checkIsScrolling, 750)).current;\n\n      useEffect(() => {\n         if (isScrollable) {\n            checkIsScrolling();\n            window.addEventListener('resize', handleResizeDebounced);\n            return () => window.removeEventListener('resize', handleResizeDebounced);\n         }\n      }, [checkIsScrolling, handleResizeDebounced, isScrollable, mainRef]);\n\n      let inner;\n\n      if (isScrollable) {\n         inner = (\n            <MuiGrid\n               name='Grid-scroll inner'\n               ref={mainRef}\n               className={classes.innerGridStyle}\n               style={{\n                  padding: spacing !== undefined ? theme.spacing(spacing) : undefined,\n                  paddingRight:\n                     isVerticalScroll && isAddScrollPadding\n                        ? 8\n                        : spacing !== undefined\n                        ? theme.spacing(spacing)\n                        : undefined,\n                  ...innerStyle,\n               }}\n               container={container}\n               item={item}\n               spacing={spacing}\n               justify={justify}\n               alignItems={alignItems}\n               alignContent={alignContent}\n            >\n               {children}\n            </MuiGrid>\n         );\n      } else {\n         inner = children;\n      }\n\n      return (\n         <MuiGrid\n            ref={ref}\n            // ref={mainRef}\n            name={name}\n            className={`${classes.gridStyle} ${className}`}\n            item={isScrollable ? true : item}\n            container={isScrollable ? false : container}\n            {...otherProps}\n            // container={isScrollable ? false : container} {...otherProps}\n            spacing={!isScrollable ? spacing : undefined}\n            justify={!isScrollable ? justify : undefined}\n            alignItems={!isScrollable ? alignItems : undefined}\n            alignContent={!isScrollable ? alignContent : undefined}\n            direction={!isScrollable ? direction : undefined}\n            wrap={!isScrollable ? wrap : undefined}\n         >\n            {inner}\n         </MuiGrid>\n      );\n   }\n);\n\nGrid.propTypes = {\n   flex: PropTypes.string, // The flex style property.\n   resizable: PropTypes.bool, // Indicates if the grid should use flex resizing (i.e. flex: '1 1')\n   fullWidth: PropTypes.bool, // Indicates if the grid should be 100%.\n   fullHeight: PropTypes.bool, // Indicates if the grid should be 100%.\n   overflow: PropTypes.string, // Key to message in the localization file.\n   //Properties from Grid\n   alignContent: PropTypes.any,\n   alignItems: PropTypes.any,\n   direction: PropTypes.any,\n   justify: PropTypes.any,\n   lg: PropTypes.any,\n   md: PropTypes.any,\n   sm: PropTypes.any,\n   spacing: PropTypes.any,\n   wrap: PropTypes.any,\n   xs: PropTypes.any,\n   zeroMinWidth: PropTypes.any,\n   isScrollable: PropTypes.bool,\n   ...MuiGrid.propTypes, // Supports all the properties from Grid.\n};\n\nGrid.defaultProps = {\n   overflow: 'hidden',\n};\n\nexport default Grid;\n","import Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst useStyles = makeStyles(theme => ({\n   backdropStyle: {\n      zIndex: 4000,\n      color: '#fff',\n      opacity: '0.2 !important',\n   },\n   progressStyle: {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      zIndex: 5000,\n   },\n}), {name: 'loadingStyles'});\n\n/**\n * Component to show the error messages and loading spinner.\n *\n * Note:\n *    Message is the default property in values.\n */\nfunction Loading({isLoading=true, hasBackdrop = false, classes:classesProp = {}, ...progressProps}) {\n   const classes = {...useStyles(), ...classesProp};\n\n   if (isLoading) {\n      if (hasBackdrop) {\n         return <>\n            <CircularProgress className={classes.progressStyle}/>\n            <Backdrop className={classes.backdropStyle} open={true}/>\n         </>\n      } else {\n         return <CircularProgress className={classes.progressStyle} {...progressProps}/>;\n      }\n   } else {\n      return null;\n   }\n}\n\nLoading.propTypes = {\n   isLoading: PropTypes.bool,                // Indicates if the data is still loading.\n   hasBackdrop: PropTypes.bool,              // Indicates if the backdrop should display.\n}\n\nexport default Loading;\n","import {useState} from 'react';\nimport {useEffect} from 'react';\nimport {useRecoilState} from 'recoil';\nimport {useSetRecoilState, atom} from 'recoil';\nimport {ADMIN_GROUP} from '../../../Constants';\nimport {userRoleState} from '../../../pages/Main';\n\nexport const userGroupsState = atom({\n   key: 'userGroupsStateKey',\n   default: {groups: [], signOut: undefined},\n});\n\nexport const authenticationDataStatus = atom({\n   key: 'authenticationData',\n   default: {},\n});\n\nexport const userStatus = atom({\n   key: 'userStatus',\n   default: {},\n});\n\nexport default function AuthenticatedUser({authState, children}) {\n   const setUserGroups = useSetRecoilState(userGroupsState);\n   const [userRole, setUserRole] = useRecoilState(userRoleState);\n   const [authStateData, setAuthStateData] = useRecoilState(authenticationDataStatus);\n   const [isInitialized, setIsInitialized] = useState(false);\n\n   useEffect(() => {\n      if (authState) {\n         const groups = authState?.user?.signInUserSession?.idToken?.payload?.['cognito:groups'] ?? [];\n         setUserGroups({groups, signOut: authState.signOut});\n\n         const isAdmin = groups.indexOf(ADMIN_GROUP) >= 0;\n\n         if (isAdmin !== userRole.isAdmin || userRole.isClient === isAdmin) {\n            setUserRole({isAdmin: isAdmin, isClient: !isAdmin});\n         }\n\n         if (authStateData.username !== authState?.user?.username) {\n            setAuthStateData({username: authState?.user?.username, cognitoSub: authState?.user?.attributes?.sub});\n         }\n         setIsInitialized(true);\n      }\n   }, [authState]);\n\n   if (authState && isInitialized) {\n      return children;\n   } else {\n      return null;\n   }\n}\n","import {useMutation} from '@apollo/client';\nimport uniqueId from 'lodash/uniqueId';\nimport {useState, useRef} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSetRecoilState} from 'recoil';\nimport {errorState} from '../../../pages/Main';\nimport {formatMessage} from '../../utils/Utils';\nimport {useEffect} from 'react';\nimport useProgress from '../useProgress';\n\nexport const CREATE_UPDATE_ACTION = 'createUpdate';\nexport const DELETE_ACTION = 'delete';\nexport const SORT_ACTION = 'sort';\nexport const UNDELETE_ACTION = 'undelete';\n// export const UNDELETE_ACTION = 'undelete';\n\n/**\n * Hook for useMutation that updates the cache for add and delete queries. Update mutations should automatically update\n * cache without this update.\n *\n * NOTE:\n * 1) Assumes that the result of the mutation only has a single property. (e.g. {data: {operators: {...}}})\n * 2) Updates ONLY the FIRST property in an updateQuery. The first property is assumed to be a list and adds the result\n *    property to the list. Other properties in the original query are copied to the updated cache item.\n *\n * Reviewed:\n *\n * @param mutation The graphql mutation.\n *    typeKey - The localization key for the type of the object\n *    actionType - The localization key for the action type (e.g. create, update, delete).\n * @param options The options for the mutation.\n * @param showLoading Indicates if the progress should be shown.\n * @return\n */\nexport default function useMutationFHG(mutation, options, showLoading) {\n   const theUniqueId = useRef(uniqueId()).current;\n   const intl = useIntl();\n   const [, /*Unused*/ setProgress] = useProgress(theUniqueId);\n\n   const setErrorState = useSetRecoilState(errorState);\n\n   const [lastMessage, setLastMessage] = useState('');\n\n   useEffect(() => {\n      return () => {\n         setProgress(false);\n      };\n   }, [setProgress]);\n\n   const [mutationFunction, {loading, error, data}] = useMutation(mutation.mutation, options);\n\n   useEffect(() => {\n      if (error) {\n         const type = formatMessage(intl, mutation.typeKey);\n         const action = formatMessage(intl, mutation.actionKey);\n         const errorMessage = formatMessage(intl, 'action.error', undefined, {type, action});\n\n         if (errorMessage !== lastMessage) {\n            console.log(error);\n            setLastMessage(errorMessage);\n            setErrorState({error, errorMessage, errorKey: undefined});\n         }\n      } else if (lastMessage !== undefined) {\n         setLastMessage(undefined);\n      }\n   }, [error, setErrorState, lastMessage, intl, mutation.actionKey, mutation.typeKey]);\n\n   useEffect(() => {\n      if (showLoading) {\n         setProgress(loading);\n      }\n   }, [loading, setProgress, showLoading]);\n\n   return [mutationFunction, {loading, error, data}];\n}\n","// Dates displayed to the user or to match the DB format.\nexport const DATE_FORMAT_KEYBOARD = 'MM/DD/YYYY';\nexport const MONTH_FORMAT = 'MM/YYYY';\nexport const MONTH_ONLY_FORMAT = 'MMM';\nexport const YEAR_FORMAT = 'YYYY';\nexport const DATE_TIME_FORMAT = 'M/D/YYYY hh:mm a';\nexport const DATE_MEDIUM_FORMAT = 'MMM D, YYYY hh:mm a';\nexport const DATE_DB_FORMAT = 'YYYY-MM-DD';\nexport const CURRENCY_FORMAT = '$#,###,###,##0.';\nexport const CURRENCY_FULL_FORMAT = '$#,###,###,##0.00';\nexport const PERCENT_FORMAT = '##0.00%';\nexport const DAYS_TO_DISPLAY_COMPLETED_TASKS = 7;\nexport const NOTE_HOVER_TIME = 3000;\n\nexport const MONTHS = [\n   'January',\n   'February',\n   'March',\n   'April',\n   'May',\n   'June',\n   'July',\n   'August',\n   'September',\n   'October',\n   'November',\n   'December',\n   'Annual',\n];\n\nexport const MONTHS_CONVERT = {\n   jan: 'January',\n   feb: 'February',\n   mar: 'March',\n   apr: 'April',\n   may: 'May',\n   jun: 'June',\n   jul: 'July',\n   aug: 'August',\n   sep: 'September',\n   oct: 'October',\n   nov: 'November',\n   dec: 'December',\n   annual: 'Annual',\n};\n\n//zIndex values for the different levels.\nexport const MIDDLE_INDEX = 2000;\nexport const TOP_INDEX = 3000;\nexport const BOTTOM_INDEX = 1000;\nexport const NORMAL_INDEX = 1;\n\nexport const ERROR_COLOR = '#AA0B06';\nexport const WARNING_COLOR = '#F5CD19';\nexport const SUCCESS_COLOR = '#5C9E52';\nexport const PRIMARY_COLOR = 'rgb(107,146,65)';\n\nexport const LOCK_ICON = '/images/lock.png';\nexport const LOGO_MEDIUM = '/images/logo.png';\nexport const LOGO_LARGE = '/images/logo-large.webp';\nexport const LOGO = LOGO_LARGE;\nexport const METRICS_LOGO = '/images/Farmer_metrics_logo_v1.png';\n\nexport const ENDPOINT = !process.env.REACT_APP_ENDPOINT\n   ? '/api/graphql/'\n   : `http://${process.env.REACT_APP_ENDPOINT}/api/graphql/`;\nconsole.log('Endpoint = ', ENDPOINT);\nconsole.log('Version = ', process.env.REACT_APP_VERSION);\n\nexport const APPBAR_HEIGHT = 70;\nexport const APPBAR_SMALL_HEIGHT = 60;\nexport const DRAWER_WIDTH = 210;\nexport const EDIT_DRAWER_WIDTH = 300;\nexport const ADMIN_DRAWER = 300;\n\n// File upload\nexport const FILE_MIME_TYPES = [\n   'text/plain',\n   'text/csv',\n   'application/pdf',\n   'application/vnd.ms-excel',\n   'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n];\nexport const BUCKET_NAME = 'legacy-farmer-test-temp-public';\n// export const FILE_BUCKET =\n//    process.env.NODE_ENV !== 'production' ? 'legacy-farmer-test-users' : 'legacy-farmer-prod-users';\nexport const FILE_BUCKET = 'legacy-farmer-test-users';\nexport const UNDO_DURATION = 4000;\nexport const ROOT_ID = 'root';\nexport const PASSIVE_ROOT_ID = 'passiveRoot';\nexport const ACTIVE_ROOT_ID = 'activeRoot';\n\n// Roles\nexport const ADMIN_GROUP = 'Admin';\n\n// Edit Constants\nexport const CLIENT_EDIT = 'Client';\nexport const ENTITY_EDIT = 'Entity';\nexport const USER_EDIT = 'User';\nexport const TASK_EDIT = 'Task';\nexport const ASSET_EDIT = 'Asset';\nexport const LIABILITY_EDIT = 'Liability';\nexport const SEAT_EDIT = 'SeatEdit';\n\n//Paths\nexport const DEFAULT_PATH = '/';\nexport const ADMIN_PATH = '/admin';\nexport const ADMIN_SETUP_PATH = '/admin/:clientId?';\nexport const CLIENT_DASHBOARD_PATH = '/client/:clientId';\nexport const CLIENT_ENTITY_DASHBOARD_PATH = '/client/:clientId/entity/:entityId';\nexport const ACCOUNTABILITY_CLIENT_ENTITY_PATH = '/client/:clientId/entity/:entityId/accountability';\nexport const CLIENT_ENTITY_PATH = '/client/:clientId/entity/:entityEditId?';\nexport const ENTITY_ASSET_PATH = '/client/:clientId/entity/:entityId/asset';\nexport const LIABILITIES_PATH = '/client/:clientId/entity/:entityId/liability';\n\n//lms\nexport const LMS_DASHBOARD_PATH = '/client/:clientId/course/:courseId/:unitId';\nexport const LMS_UNIT_PATH = '/client/:clientId/course/:courseId';\nexport const LMS_SEARCH_PATH = '/client/:clientId/search/:searchParams?';\n//lms end\n\nexport const LOAN_ANALYSIS_PATH = '/client/:clientId/entity/:entityId/loanAnalysis';\n// export const LOAN_ANALYSIS_PATH = '/client/:clientId/entity/:entityId/loanAnalysis/:mode?';\nexport const BALANCE_SHEET_PATH = '/client/:clientId/entity/:entityId/balanceSheet';\n// export const BALANCE_SHEET_PATH = '/client/:clientId/entity/:entityId/balanceSheet/:mode?';\nexport const CASH_FLOW_PATH = '/client/:clientId/entity/:entityId/cashFlow';\nexport const FILES_PATH = '/client/:clientId/entity/:entityId/files';\n// export const CASH_FLOW_PATH = '/client/:clientId/entity/:entityId/cashFlow/:mode?';\nexport const LOAN_AMORTIZATION_PATH = '/client/:clientId/entity/:entityId/loanAmortization';\nexport const CLIENT_TASK_NOTES_PATH = '/client/:clientId/entity/:entityId/task';\nexport const ADMIN_USER_PATH = '/admin/user/:userId?';\nexport const ADMIN_USERS_PATH = '/admin/user';\nexport const ADMIN_COURSES_PATH = '/admin/course';\nexport const ADMIN_COURSE_PATH = '/admin/course/:courseId?/:moduleId?';","import gql from 'graphql-tag';\n\nexport const CLIENT_FRAGMENT = gql`\n   fragment clientInfo on Client {\n      id\n      addressLineOne\n      addressLineTwo\n      cityId\n      contactName\n      email\n      name\n      phone\n      stateId\n      zipCode\n      note\n      startMonth\n      isDeleted\n   }\n`;\n\nexport const USER_FRAGMENT = gql`\n   fragment userInfo on User {\n      id\n      contactName\n      username\n      email\n      clientId\n      entityIdList\n      isDeleted\n   }\n`;\n// lms \nexport const COURSE_FRAGMENT = gql`\n   fragment courseInfo on Course {\n      id\n      name\n      description\n      keywords\n      active\n   }\n`;\n\nexport const MODULES_FRAGMENT = gql`\n   fragment moduleInfo on Modules {\n      id\n      course_id\n      name\n      order_no\n      isDeleted\n   }\n`;\n\nexport const UNITS_FRAGMENT = gql`\n   fragment unitInfo on Units {\n      id\n      module_id\n      name\n      description\n      introVideo\n      transcript\n      isDeleted\n   }\n`;\nexport const RESOURCES_FRAGMENT = gql`\n   fragment resourcesInfo on Resources {\n      id\n      unit_id\n      label\n      type\n      path_url\n      isDeleted\n      original_filename\n   }\n`;\n// lms end\nexport const TASK_FRAGMENT = gql`\n   fragment taskInfo on Task {\n      id\n      dueDate\n      isCompleted\n      subject\n      isDeleted\n      clientId\n      userId\n      entityId\n      repeatAmount\n      repeatTask\n      repeatInterval\n      lastCompletionDateTime\n   }\n`;\n\nexport const TASK_HISTORY_FRAGMENT = gql`\n   fragment taskHistoryInfo on TaskHistory {\n      id\n      dueDate\n      completionDateTime\n      taskId\n      isDeleted\n   }\n`;\n\nexport const ENTITY_FRAGMENT = gql`\n   fragment entityInfo on Entity {\n      id\n      name\n      ein\n      entityId\n      description\n      clientId\n      isActive\n      isDeleted\n   }\n`;\n// The properties of Client needed for the client queries. Always use the same properties to aid caching.\nexport const FILE_FRAGMENT = gql`\n   fragment fileInfo on FileUpload {\n      id\n      clientId\n      entityId\n      tag\n      fileData {\n         id: fileHash\n         fileFilename\n         fileS3\n      }\n   }\n`;\n\nexport const ASSET_FRAGMENT = gql`\n   fragment assetInfo on Asset {\n      id\n      assetId\n      assetCategoryId\n      snapshotDate\n      assetCategory {\n         id\n         name\n         term\n      }\n      entityId\n      amount\n      description\n      isCollateral\n      quantity\n      head\n      weight\n      price\n      year\n      unitTypeId\n      acres\n      isRemoved\n      startDate\n      removedDate\n   }\n`;\n\nexport const UNIT_TYPE_FRAGMENT = gql`\n   fragment unitTypeInfo on UnitType {\n      id\n      name\n   }\n`;\n\nexport const LIABILITY_FRAGMENT = gql`\n   fragment liabilityInfo on Liability {\n      id\n      liabilityId\n      interestRate\n      note\n      bankId\n      bank {\n         id\n         name\n      }\n      liabilityCategoryId\n      liabilityCategory {\n         id\n         name\n      }\n      entityId\n      amount\n      description\n      isCollateral\n      isRemoved\n      payment\n      paymentDueDate\n      startDate\n      removedDate\n      createdDateTime\n   }\n`;\n\nexport const BANK_FRAGMENT = gql`\n   fragment bankInfo on Bank {\n      id\n      name\n   }\n`;\n\nexport const INCOME_FRAGMENT = gql`\n   fragment incomeInfo on Income {\n      id\n      actual\n      date\n      #      description\n      entityId\n      expected\n      incomeTypeId\n      #      incomeType {\n      #         id\n      #         name\n      #      }\n      isDeleted\n      noteActual\n      noteExpected\n   }\n`;\n\nexport const INCOME_TYPE_FRAGMENT = gql`\n   fragment incomeTypeInfo on IncomeType {\n      id\n      name\n      entityId\n      isDeleted\n   }\n`;\n\nexport const EXPENSE_FRAGMENT = gql`\n   fragment expenseInfo on Expense {\n      id\n      actual\n      date\n      entityId\n      expected\n      expenseTypeId\n      isDeleted\n      noteActual\n      noteExpected\n   }\n`;\n\nexport const EXPENSE_TYPE_FRAGMENT = gql`\n   fragment expenseTypeInfo on ExpenseType {\n      id\n      name\n      entityId\n      isDeleted\n   }\n`;\n\nexport const BALANCE_REPORT_FRAGMENT = gql`\n   fragment balanceReportInfo on BalanceReport {\n      assets {\n         current {\n            categories {\n               categoryName\n               total\n            }\n            total\n         }\n         intermediate {\n            categories {\n               categoryName\n               total\n            }\n            total\n         }\n         longTerm {\n            categories {\n               categoryName\n               total\n            }\n            total\n         }\n      }\n      liabilities {\n         current {\n            categories {\n               categoryName\n               total\n            }\n            total\n         }\n         intermediate {\n            categories {\n               categoryName\n               total\n            }\n            total\n         }\n         longTerm {\n            categories {\n               categoryName\n               total\n            }\n         }\n      }\n      currentRatio\n      equityAssetPercentage\n      totalAssetCount\n      totalAssets\n      totalEquity\n      totalEquityCount\n      totalLiabilities\n      totalLiabilityCount\n      workingCapital\n   }\n`;\n\nexport const LOAN_ANALYSIS_FRAGMENT = gql`\n   fragment loanAnalysisInfo on LoanAnalysis {\n      assets {\n         bankLoanValue\n         current {\n            bankLoanValue\n            marketValue\n            loanToValue\n            bankLoanValue\n            categories {\n               categoryName\n               bankLoanValue\n               marketValue\n               loanToValue\n            }\n         }\n         intermediate {\n            bankLoanValue\n            loanToValue\n            marketValue\n            categories {\n               categoryName\n               bankLoanValue\n               marketValue\n               loanToValue\n            }\n         }\n         loanToValue\n         longTerm {\n            bankLoanValue\n            loanToValue\n            marketValue\n            categories {\n               categoryName\n               bankLoanValue\n               marketValue\n               loanToValue\n            }\n         }\n         marketValue\n         totalAssets: marketValue\n      }\n      liabilities {\n         totalLiabilities: marketValue\n         current {\n            subtotalLiabilities: marketValue\n            categories {\n               categoryName\n               currentBalance: marketValue\n            }\n         }\n         intermediate {\n            subtotalLiabilities: marketValue\n            categories {\n               categoryName\n               currentBalance: marketValue\n            }\n         }\n         loanToValue\n         longTerm {\n            subtotalLiabilities: marketValue\n            categories {\n               categoryName\n               currentBalance: marketValue\n            }\n         }\n      }\n      clientLeverage\n      lessTotalLiabilities\n      totalBankSafetyNet\n   }\n`;\n\nconst CASH_FLOW_SEGMENT_FRAGMENT = gql`\n   fragment cashFlowSegmentInfo on CashFlowInfo {\n      id\n      actual\n      expected\n      noteActual\n      noteExpected\n   }\n`;\n\nconst CASH_FLOW_INCOME_EXPENSE_INFO = gql`\n   fragment cashFlowIncomeExpenseInfo on CashFlowIncomeExpenseInfo {\n      id\n      jan {\n         ...cashFlowSegmentInfo\n      }\n      feb {\n         ...cashFlowSegmentInfo\n      }\n      mar {\n         ...cashFlowSegmentInfo\n      }\n      apr {\n         ...cashFlowSegmentInfo\n      }\n      may {\n         ...cashFlowSegmentInfo\n      }\n      jun {\n         ...cashFlowSegmentInfo\n      }\n      jul {\n         ...cashFlowSegmentInfo\n      }\n      aug {\n         ...cashFlowSegmentInfo\n      }\n      sep {\n         ...cashFlowSegmentInfo\n      }\n      oct {\n         ...cashFlowSegmentInfo\n      }\n      nov {\n         ...cashFlowSegmentInfo\n      }\n      dec {\n         ...cashFlowSegmentInfo\n      }\n      annual {\n         ...cashFlowSegmentInfo\n      }\n      typeName\n      typeId\n      entityId\n   }\n`;\n\nexport const CASH_FLOW_FRAGMENT = gql`\n   fragment cashFlowInfo on CashFlowReport {\n      id\n      actualOperatingLoanBalanceEnd\n      actualYTDCashFlow\n      expectedOperatingLoanBalanceEnd\n      expectedYTDCashFlow\n      monthOrder\n      startMonth\n      income {\n         ...cashFlowIncomeExpenseInfo\n      }\n      incomeGlobal {\n         ...cashFlowIncomeExpenseInfo\n      }\n      expenses {\n         ...cashFlowIncomeExpenseInfo\n      }\n      expenseGlobal {\n         ...cashFlowIncomeExpenseInfo\n      }\n      netCashFlow {\n         ...cashFlowIncomeExpenseInfo\n      }\n      operatingLoanBalance {\n         ...cashFlowIncomeExpenseInfo\n      }\n   }\n   ${CASH_FLOW_INCOME_EXPENSE_INFO}\n   ${CASH_FLOW_SEGMENT_FRAGMENT}\n`;\n\nexport const ENTITY_CASH_FLOW_FRAGMENT = gql`\n   fragment entityCashFlowInfo on EntityCashFlow {\n      id\n      actualOperatingLoanBalance\n      date\n      entityId\n      expectedOperatingLoanBalance\n      targetIncome\n      operatingLoanLimit\n      year\n   }\n`;\n\nexport const SEAT_FRAGMENT = gql`\n   fragment seatInfo on Seat {\n      id\n      name\n      responsibilities\n      order\n      seatId\n      userIdList\n      clientId\n      isDeleted\n      createdDateTime\n   }\n`;\n","import gql from 'graphql-tag';\nimport {DAYS_TO_DISPLAY_COMPLETED_TASKS} from '../Constants';\nimport {UNDELETE_ACTION, DELETE_ACTION, SORT_ACTION, CREATE_UPDATE_ACTION} from '../fhg/hooks/data/useMutationFHG';\nimport {SEAT_FRAGMENT} from './FragmentsGL';\nimport {COURSE_FRAGMENT, MODULES_FRAGMENT, UNITS_FRAGMENT, RESOURCES_FRAGMENT } from './FragmentsGL';\nimport {ENTITY_CASH_FLOW_FRAGMENT} from './FragmentsGL';\nimport {CASH_FLOW_FRAGMENT} from './FragmentsGL';\nimport {LOAN_ANALYSIS_FRAGMENT} from './FragmentsGL';\nimport {BALANCE_REPORT_FRAGMENT} from './FragmentsGL';\nimport {EXPENSE_TYPE_FRAGMENT} from './FragmentsGL';\nimport {INCOME_TYPE_FRAGMENT} from './FragmentsGL';\nimport {EXPENSE_FRAGMENT} from './FragmentsGL';\nimport {INCOME_FRAGMENT} from './FragmentsGL';\nimport {LIABILITY_FRAGMENT} from './FragmentsGL';\nimport {UNIT_TYPE_FRAGMENT} from './FragmentsGL';\nimport {TASK_HISTORY_FRAGMENT} from './FragmentsGL';\nimport {ASSET_FRAGMENT} from './FragmentsGL';\nimport {FILE_FRAGMENT} from './FragmentsGL';\nimport {ENTITY_FRAGMENT} from './FragmentsGL';\nimport {USER_FRAGMENT} from './FragmentsGL';\nimport {TASK_FRAGMENT} from './FragmentsGL';\nimport {CLIENT_FRAGMENT} from './FragmentsGL';\n\nexport const CITY_STATE_QUERY = gql`\n   query getCityState {\n      cities: city_All {\n         id\n         name\n         isDeleted\n      }\n      states: state_All {\n         id\n         name\n         abbreviation\n         isDeleted\n      }\n   }\n`;\n\nexport const getCityCacheQueries = () => {\n   return [{query: CITY_STATE_QUERY, queryPath: 'cities'}];\n};\n\nexport const CITY_CREATE_UPDATE = {\n   mutation: gql`\n      mutation cityCreateUpdate($id: UUID!, $name: String) {\n         city: city_CreateUpdate(city: {id: $id, name: $name}) {\n            id\n            name\n            isDeleted\n         }\n      }\n   `,\n   typeKey: 'city.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\nexport const CITY_DELETE = {\n   mutation: gql`\n      mutation cityDelete($id: UUID!) {\n         city_Delete(cityId: $id)\n      }\n   `,\n   typeKey: 'city.type',\n   actionKey: DELETE_ACTION,\n};\n\n// CLIENT\nexport const CLIENT_ALL_QUERY = gql`\n   query getAllClients {\n      clients: client_All {\n         ...clientInfo\n      }\n   }\n   ${CLIENT_FRAGMENT}\n`;\n\nexport const CLIENT_BY_ID_QUERY = gql`\n   query getClientById($clientId: UUID!) {\n      client: client_ById(clientId: $clientId) {\n         ...clientInfo\n      }\n   }\n   ${CLIENT_FRAGMENT}\n`;\n\nexport const getClientCacheQueries = () => {\n   return [{query: CLIENT_ALL_QUERY, queryPath: 'clients'}];\n};\n\nexport const CLIENT_CREATE_UPDATE = {\n   mutation: gql`\n      mutation clientCreateUpdate(\n         $id: UUID!\n         $cityId: UUID\n         $stateId: UUID\n         $name: String\n         $addressLineOne: String\n         $addressLineTwo: String\n         $email: String\n         $phone: String\n         $zipCode: Int\n         $contactName: String\n         $note: String\n         $startMonth: String\n      ) {\n         client: client_CreateUpdate(\n            client: {\n               id: $id\n               cityId: $cityId\n               stateId: $stateId\n               name: $name\n               addressLineOne: $addressLineOne\n               addressLineTwo: $addressLineTwo\n               email: $email\n               phone: $phone\n               zipCode: $zipCode\n               contactName: $contactName\n               note: $note\n               startMonth: $startMonth\n            }\n         ) {\n            ...clientInfo\n         }\n      }\n      ${CLIENT_FRAGMENT}\n   `,\n   typeKey: 'client.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\n// Delete the client on the server.\nexport const CLIENT_DELETE = {\n   mutation: gql`\n      mutation ClientDelete($id: UUID!) {\n         client_Delete(clientId: $id)\n      }\n   `,\n   typeKey: 'client.type',\n   actionKey: DELETE_ACTION,\n};\n\n// User\n\nexport const USER_CREATE_UPDATE = {\n   mutation: gql`\n      mutation userCreateUpdate(\n         $id: UUID!\n         $clientId: UUID\n         $contactName: String\n         $email: String\n         $username: String\n         $password: String\n      ) {\n         user: user_CreateUpdate(\n            user: {\n               id: $id\n               clientId: $clientId\n               contactName: $contactName\n               email: $email\n               username: $username\n               password: $password\n            }\n         ) {\n            ...userInfo\n         }\n      }\n      ${USER_FRAGMENT}\n   `,\n   typeKey: 'user.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\n// Delete the user on the server.\nexport const USER_DELETE = {\n   mutation: gql`\n      mutation UserDelete($id: UUID!) {\n         user_Delete(userId: $id)\n      }\n   `,\n   typeKey: 'user.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const USER_CLIENT_QUERY = gql`\n   query getUserAllWhere($clientId: [UUID], $id: [UUID], $cognitoSub: [String]) {\n      users: user_AllWhere(userSearch: {clientId: $clientId, id: $id, cognitoSub: $cognitoSub}) {\n         ...userInfo\n      }\n   }\n   ${USER_FRAGMENT}\n`;\n\nexport const USER_ADMIN_QUERY = gql`\n   query getAdminUser {\n      users: user_AllWhere(userSearch: {clientId: null}) {\n         ...userInfo\n      }\n   }\n   ${USER_FRAGMENT}\n`;\n\nexport const getUserCacheQueries = (clientId = null) => {\n   return [{query: USER_CLIENT_QUERY, variables: {clientId}, queryPath: 'users'}];\n};\n\n// course\nexport const COURSE_QUERY_WHERE = gql`\n   query getCourse($active: Boolean!){\n      courses:course_AllWhere(courseSearch: {active: $active}){\n        ...courseInfo\n      }\n   }\n   ${COURSE_FRAGMENT}\n`;\nexport const COURSE_ALL_QUERY_WHERE = gql`\n   query getCourseAll{\n      courses:course_All_with_modules{\n         id\n         name\n         description\n         active\n         modules{\n            id\n            course_id\n            name\n            order_no\n            units{\n               id\n               module_id\n               name\n               description\n               introVideo\n               transcript\n            }\n         }\n      }\n   }\n`;\nexport const COURSE_ALL_QUERY_WHERE_ID = gql`\n   query getCourseById($id: UUID, $active: Boolean!) {\n      courses:course_All_with_id(courseSearch: {id: $id, active: $active}) {\n         id\n         name\n         description\n         keywords\n         active\n         modules{\n            id\n            course_id\n            name\n            order_no\n            units{\n               id\n               module_id\n               name\n               description\n               introVideo\n               transcript\n               markAsRead{\n                  id\n                  unit_id\n                  user_id\n               }\n            }\n         }\n         \n      }\n   }\n`;\nexport const COURSE_QUERY = gql`\n   query getCourseById($id: UUID, $active: Boolean!) {\n      courses:course_AllWhere(courseSearch: {id: $id, active: $active}) {\n         ...courseInfo,\n      }\n   }\n   ${COURSE_FRAGMENT}\n`;\nexport const getCourseCacheQueries = () => {\n   return [{query: COURSE_QUERY_WHERE, variables: {active: true}, queryPath: 'courses'}];\n\n}\nexport const COURSE_CREATE_UPDATE = {\n   mutation: gql`\n      mutation courseCreateUpdate($id: UUID!, $name: String!, $description: String!, $keywords: String!)\n      {\n         courses: course_CreateUpdate(course: {id: $id, name: $name, description: $description, keywords: $keywords }) {\n            ...courseInfo\n         }\n      }\n      ${COURSE_FRAGMENT}\n   `,\n   typeKey: 'lms.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n// Delete the course.\nexport const COURSE_DELETE = {\n   mutation: gql`\n      mutation CourseDelete($id: UUID!) {\n         course_Delete(courseId: $id)\n      }\n   `,\n   typeKey: 'lms.type',\n   actionKey: DELETE_ACTION,\n};\n// mark as read \nexport const MARK_AS_READ_QUERY = gql`\n   query getMarkAsRead_All($isDeleted: Boolean) {\n      markAsRead:markAsRead_AllWhere(markAsReadSearch: {isDeleted: $isDeleted}){\n         id\n         unit_id\n         user_id\n      }\n   }\n`;\n\nexport const MARK_AS_READ_WHERE = gql`\n   query getCourseById($unit_id: UUID, $isDeleted: Boolean) {\n      markAsRead:markAsRead_AllWhere(markAsReadSearch: {unit_id: $unit_id, isDeleted: $isDeleted}) {\n         id\n         unit_id\n         user_id\n      }\n   }\n`;\nexport const getMarkAsReadQueries = (unit_id, isDeleted) => {\n   return [{query: MARK_AS_READ_WHERE, variables: {unit_id: unit_id, isDeleted: isDeleted}, queryPath: 'markAsRead.type'}];\n}\nexport const MARK_AS_READ_CREATE = {\n   mutation: gql`\n      mutation markAsRead_CreateUpdate($id: UUID, $unit_id: UUID)\n      {\n         markAsRead: markAsRead_CreateUpdate(markAsRead: { id: $id, unit_id: $unit_id }) {\n            id\n            unit_id\n            user_id\n         }\n      }\n   `,\n   typeKey: 'markAsRead.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\nexport const MARK_AS_READ_DELETE = {\n   mutation: gql`\n      mutation markAsReadDelete($id: UUID!) {\n         markAsRead_Delete(id: $id)\n      }\n   `,\n   typeKey: 'unit.type',\n   actionKey: DELETE_ACTION,\n};\n// modules\nexport const MODULES_QUERY_WHERE = gql`\n   query getModuleAllWhere($course_id: UUID!, $isDeleted: Boolean!) {\n      modules:modules_AllWhere(moduleSearch: {course_id: $course_id, isDeleted: $isDeleted}) {\n         ...moduleInfo\n      }\n   }\n   ${MODULES_FRAGMENT}\n`;\nexport const getModelCacheQueries = (course_id, isDeleted) => {\n   return [{query: MODULES_QUERY_WHERE, variables: {course_id: course_id, isDeleted: isDeleted}, queryPath: 'modules'}];\n}\nexport const MODULE_QUERY = gql`\n   query getCourseById($id: UUID, $isDeleted: Boolean!) {\n      modules:modules_AllWhere(moduleSearch: {id: $id, isDeleted: $isDeleted}) {\n         ...moduleInfo\n      }\n   }\n   ${MODULES_FRAGMENT}\n`;\nexport const MODULES_CREATE_UPDATE = {\n   mutation: gql`\n      mutation moduleCreateUpdate($course_id: UUID!, $id: UUID!, $name: String!, $order_no: Int! )\n      {\n         modules: module_CreateUpdate(module: {id: $id, course_id: $course_id, name: $name, order_no: $order_no }) {\n            ...moduleInfo\n         }\n      }\n      ${MODULES_FRAGMENT}\n   `,\n   typeKey: 'module.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\nexport const MODULE_DELETE = {\n   mutation: gql`\n      mutation ModuleDelete($id: UUID!) {\n         modules_Delete(moduleId: $id)\n      }\n   `,\n   typeKey: 'module.type',\n   actionKey: DELETE_ACTION,\n};\n// Unit\nexport const UNITS_QUERY_WHERE = gql`\n   query getUnitsAllWhere($module_id: UUID!, $isDeleted: Boolean!) {\n      units:units_AllWhere(unitSearch: {module_id: $module_id, isDeleted: $isDeleted}) {\n         ...unitInfo\n         resources{\n            id\n            unit_id\n            label\n            type\n            path_url\n            isDeleted\n            original_filename\n         }\n      }\n   }\n   ${UNITS_FRAGMENT}\n`;\n\nexport const getUnitCacheQueries = (module_id, isDeleted) => {\n   return [{query: UNITS_QUERY_WHERE, variables: {module_id: module_id, isDeleted: isDeleted}, queryPath: 'units'}];\n}\nexport const UNIT_QUERY = gql`\n   query getUnitById($id: UUID, $isDeleted: Boolean!) {\n      units:units_AllWhere(unitSearch: {id: $id, isDeleted: $isDeleted}) {\n         ...unitInfo\n      }\n   }\n   ${UNITS_FRAGMENT}\n`;\nexport const UNIT_RESOURCES_QUERY = gql`\n   query getUnitAndResourcesById($id: UUID, $isDeleted: Boolean!) {\n      units:units_Resources_AllWhere(unitSearch: {id: $id, isDeleted: $isDeleted}) {\n         ...unitInfo,\n         resources{\n            id\n            unit_id\n            label\n            type\n            path_url\n            isDeleted\n            original_filename\n         }\n         markAsRead{\n            id\n            unit_id\n            user_id\n         }\n      }\n   }\n   ${UNITS_FRAGMENT}\n`;\nexport const getUnitAllCacheQueries = (id, isDeleted) => {\n   return [{query: UNIT_RESOURCES_QUERY, variables: {id: id, isDeleted: isDeleted}, queryPath: 'units'}];\n}\nexport const UNIT_CREATE_UPDATE = {\n   mutation: gql`\n      mutation unitCreateUpdate(\n         $module_id: UUID!, \n         $id: UUID!, \n         $name: String!, \n         $description: String!, \n         $transcript: String!, \n         $fileLocation: String!, \n         $originalFilename: String,\n         $resources: String\n      )\n      {\n         units: unit_CreateUpdate(\n            unit: {\n               id: $id, \n               module_id: $module_id, \n               name: $name, \n               description: $description, \n               transcript: $transcript, \n               fileS3Data: {fileLocation: $fileLocation, originalFilename: $originalFilename }, \n               resources: $resources\n            }) {\n            ...unitInfo\n         }\n      }\n      ${UNITS_FRAGMENT}\n   `,\n   typeKey: 'unit.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\n// export const UNIT_CREATE_UPDATE = {\n//    mutation: gql`\n//       mutation unitCreateUpdate($module_id: UUID!, $id: UUID!, $name: String!, $description: String!, $file: Upload!, $transcript: String!)\n//       {\n//          units: unit_CreateUpdate(unit: {id: $id, module_id: $module_id, name: $name, description: $description, file: $file, transcript: $transcript }) {\n//             ...unitInfo\n//          }\n//       }\n//       ${UNITS_FRAGMENT}\n//    `,\n//    typeKey: 'unit.type',\n//    actionKey: CREATE_UPDATE_ACTION,\n// };\n\nexport const UNIT_DELETE = {\n   mutation: gql`\n      mutation UnitDelete($id: UUID!) {\n         units_Delete(unitId: $id)\n      }\n   `,\n   typeKey: 'unit.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const UNIT_VIDEO_DELETE = {\n   mutation: gql`\n      mutation UnitVideoDelete($id: UUID!) {\n         video_Delete(unitId: $id)\n      }\n   `,\n   typeKey: 'unit.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const UNIT_SORT = {\n   mutation: gql`\n      mutation UnitSort($id: UUID!, $type: String!, $nearestId: UUID!) {\n         unit_sort(unitId: $id, type: $type, nearestId: $nearestId)\n      }\n   `,\n   typeKey: 'unit.type',\n   actionKey: SORT_ACTION,\n};\n// resources \nexport const RESOURCES_QUERY_WHERE = gql`\n   query getResourcesAllWhere($unit_id: UUID, $isDeleted: Boolean) {\n      resources:resources_AllWhere(resourceSearch: {unit_id: $unit_id, isDeleted: $isDeleted}) {\n         ...resourcesInfo\n      }\n   }\n   ${RESOURCES_FRAGMENT}\n`;\nexport const RESOURCES_CREATE_UPDATE = {\n   mutation: gql`\n      mutation resourceCreateUpdate( $unit_id: UUID!, $label: String! ) {\n         resources: resources_CreateUpdate( resources: { unit_id: $unit_id, label: $label }) {\n            ...resourcesInfo\n         }\n      }\n      ${RESOURCES_FRAGMENT}\n   `,\n   typeKey: 'resources.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\nexport const getResourcesCacheQueries = (unit_id, isDeleted) => {\n   return [{query: RESOURCES_QUERY_WHERE, variables: {unit_id: unit_id, isDeleted: isDeleted}, queryPath: 'resources'}];\n}\nexport const RESOURCES_DELETE = {\n   mutation: gql`\n      mutation ResourceDelete($id: UUID!) {\n         resources_Delete(resourse_id: $id)\n      }\n   `,\n   typeKey: 'resources.type',\n   actionKey: DELETE_ACTION,\n};\nexport const RESOURCES_EDIT = {\n   mutation: gql`\n      mutation ResourceEdit( $unit_id: UUID!, $label: String! ) {\n         resources: resources_edit_label( resourcesLabel: { unit_id: $unit_id, label: $label }) {\n            ...resourcesInfo\n         }\n      }\n      ${RESOURCES_FRAGMENT}\n   `,\n   typeKey: 'resources.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\n// Tasks\nexport const TASK_CREATE_UPDATE = {\n   mutation: gql`\n      mutation TaskCreateUpdate(\n         $id: UUID!\n         $clientId: UUID!\n         $dueDate: DateOnly\n         $description: String\n         $isCompleted: Boolean\n         $subject: String\n         $userId: UUID\n         $entityId: UUID\n         $repeatAmount: Int\n         $repeatDayOf: Int\n         $repeatInterval: String\n         $repeatTask: Boolean\n      ) {\n         task: task_CreateUpdate(\n            task: {\n               id: $id\n               clientId: $clientId\n               subject: $subject\n               description: $description\n               isCompleted: $isCompleted\n               dueDate: $dueDate\n               userId: $userId\n               entityId: $entityId\n               repeatAmount: $repeatAmount\n               repeatDayOf: $repeatDayOf\n               repeatInterval: $repeatInterval\n               repeatTask: $repeatTask\n            }\n         ) {\n            ...taskInfo\n         }\n      }\n      ${TASK_FRAGMENT}\n   `,\n   typeKey: 'task.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\nexport const TASK_CLIENT_QUERY = gql`\n   query getTaskAllWhere($clientId: [UUID], $entityId: [UUID]) {\n      tasks: task_AllWhere(taskSearch: {clientId: $clientId, entityId: $entityId}) {\n         ...taskInfo\n      }\n   }\n   ${TASK_FRAGMENT}\n`;\n\nexport const TASK_QUERY = gql`\n   query getTask($taskId: UUID!) {\n      task: task_ById(taskId: $taskId) {\n         ...taskInfo\n      }\n   }\n   ${TASK_FRAGMENT}\n`;\n\n// Delete the task on the server.\nexport const TASK_DELETE = {\n   mutation: gql`\n      mutation TaskDelete($id: UUID!) {\n         task_Delete(taskId: $id)\n      }\n   `,\n   typeKey: 'task.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const TASK_CURRENT_QUERY = gql`\n   query getTasksCurrent($clientId: UUID!, $entityId: [UUID], $completedDays: Int) {\n      tasks: task_AllCurrent(clientId: $clientId, completedDays: $completedDays, taskSearch: {entityId: $entityId}) {\n         ...taskInfo\n      }\n   }\n   ${TASK_FRAGMENT}\n`;\n\nexport const getTaskCacheQueries = (clientId, taskId) => {\n   const queries = [\n      {query: TASK_CLIENT_QUERY, variables: {clientId}, queryPath: 'tasks'},\n      {\n         query: TASK_CURRENT_QUERY,\n         variables: {clientId, completedDays: DAYS_TO_DISPLAY_COMPLETED_TASKS},\n         queryPath: 'tasks',\n      },\n      {query: TASK_CURRENT_QUERY, variables: {clientId, completedDays: 0}, queryPath: 'tasks'},\n   ];\n\n   if (taskId) {\n      queries.push({query: TASK_HISTORY_TASK_QUERY, variables: {taskId}, queryPath: 'taskHistory'});\n   }\n\n   return queries;\n};\n\nexport const TASK_HISTORY_TASK_QUERY = gql`\n   query getTaskHistoryAllWhere($taskId: [UUID], $limit: Int, $offset: Int, $completionDateTime: [Timestamp]) {\n      taskHistory: taskHistory_AllWhere(\n         limit: $limit\n         offset: $offset\n         taskHistorySearch: {taskId: $taskId, completionDateTime: $completionDateTime}\n      ) {\n         ...taskHistoryInfo\n      }\n   }\n   ${TASK_HISTORY_FRAGMENT}\n`;\n\nexport const TASK_HISTORY_DELETE = {\n   mutation: gql`\n      mutation taskHistoryDelete($id: UUID!) {\n         taskHistory_Delete(taskHistoryId: $id)\n      }\n   `,\n   typeKey: 'taskHistory.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const getTaskHistoryCacheQueries = (taskId, completionDateTime) => {\n   const queries = [{query: TASK_HISTORY_TASK_QUERY, variables: {taskId}, queryPath: 'taskHistory'}];\n\n   if (completionDateTime) {\n      queries.push({query: TASK_HISTORY_TASK_QUERY, variables: {taskId, completionDateTime}, queryPath: 'taskHistory'});\n   }\n\n   return queries;\n};\n// Entities\n\nexport const ENTITY_CREATE_UPDATE = {\n   mutation: gql`\n      mutation entityCreateUpdate(\n         $id: UUID!\n         $name: String\n         $ein: String\n         $clientId: UUID\n         $entityId: UUID\n         $description: String\n         $isActive: Boolean\n      ) {\n         entity: entity_CreateUpdate(\n            entity: {\n               id: $id\n               name: $name\n               ein: $ein\n               entityId: $entityId\n               clientId: $clientId\n               description: $description\n               isActive: $isActive\n            }\n         ) {\n            ...entityInfo\n         }\n      }\n      ${ENTITY_FRAGMENT}\n   `,\n   typeKey: 'entity.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\n// Delete the entity on the server.\nexport const ENTITY_DELETE = {\n   mutation: gql`\n      mutation EntityDelete($id: UUID!) {\n         entity_Delete(entityId: $id)\n      }\n   `,\n   typeKey: 'entity.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const ENTITY_CLIENT_QUERY = gql`\n   query getEntityAllWhere($clientId: [UUID], $entityId: [UUID], $id: [UUID], $isActive: [Boolean]) {\n      entities: entity_AllWhere(\n         entitySearch: {clientId: $clientId, entityId: $entityId, id: $id, isActive: $isActive}\n      ) {\n         ...entityInfo\n      }\n   }\n   ${ENTITY_FRAGMENT}\n`;\n\nexport const ENTITY_BY_ID_QUERY = gql`\n   query getEntityById($entityId: UUID!) {\n      entity: entity_ById(entityId: $entityId) {\n         ...entityInfo\n      }\n   }\n   ${ENTITY_FRAGMENT}\n`;\n\nexport const getEntityCacheQueries = (clientId) => {\n   return [{query: ENTITY_CLIENT_QUERY, variables: {clientId}, queryPath: 'entities'}];\n};\n\n// Create or update a file with the given properties.\nexport const FILE_CREATE = {\n   mutation: gql`\n      mutation FileCreate(\n         $id: UUID!\n         $clientId: UUID!\n         $entityId: UUID\n         $tag: String\n         $userId: UUID\n         $fileLocation: String!\n         $originalFilename: String\n      ) {\n         file: fileUpload_CreateUpdate(\n            fileUpload: {\n               id: $id\n               clientId: $clientId\n               entityId: $entityId\n               userId: $userId\n               tag: $tag\n               fileS3Data: {fileLocation: $fileLocation, originalFilename: $originalFilename}\n            }\n         ) {\n            ...fileInfo\n         }\n      }\n      ${FILE_FRAGMENT}\n   `,\n   typeKey: 'file.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\n// Delete a client .\nexport const FILE_DELETE = {\n   mutation: gql`\n      mutation FileDelete($id: UUID!) {\n         fileUpload_Delete(fileUploadId: $id)\n      }\n   `,\n   typeKey: 'file.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const FILE_ENTITY_QUERY = gql`\n   query getFileAllWhere($clientId: [UUID], $entityId: [UUID], $tag: [String], $userId: [UUID]) {\n      files: fileUpload_AllWhere(\n         fileUploadSearch: {clientId: $clientId, entityId: $entityId, tag: $tag, userId: $userId}\n      ) {\n         ...fileInfo\n      }\n   }\n   ${FILE_FRAGMENT}\n`;\n\nexport const getFileCacheQueries = (clientId, entityId, tag) => {\n   return [{query: FILE_ENTITY_QUERY, variables: {clientId, entityId, tag}, queryPath: 'files'}];\n};\n\nexport const DAILY_QUOTE_QUERY = gql`\n   query getDailyQuoteAll {\n      dailyQuote: dailyQuote_Current {\n         id\n         text\n      }\n   }\n`;\n\n// Assets\nexport const ASSETS_ENTITY_QUERY = gql`\n   query getAssetsAllWhere($entityId: [UUID], $historyDate: DateOnly) {\n      assets: asset_AllWhere(assetSearch: {entityId: $entityId}, historyDate: $historyDate) {\n         ...assetInfo\n      }\n   }\n   ${ASSET_FRAGMENT}\n`;\n\nexport const ASSET_QUERY = gql`\n   query getAssetById($assetId: UUID!, $historyDate: DateOnly) {\n      asset: asset_ById(assetId: $assetId, historyDate: $historyDate) {\n         ...assetInfo\n      }\n   }\n   ${ASSET_FRAGMENT}\n`;\n\nexport const getAssetRefetchQueries = (entityId, assetId, historyDate) => {\n   return [\n      {query: ASSETS_ENTITY_QUERY, variables: {entityId, historyDate}, queryPath: 'assets'},\n      {query: ASSET_QUERY, variables: {assetId, historyDate}, queryPath: 'asset'},\n      {query: BALANCE_SHEET_QUERY, variables: {entityId, historyDate}, queryPath: 'asset'},\n   ];\n};\n\nexport const ASSET_CREATE_UPDATE = {\n   mutation: gql`\n      mutation assetCreateUpdate(\n         $id: UUID!\n         $assetCategoryId: UUID\n         $assetCategory: String\n         $entityId: UUID\n         $amount: Float\n         $acres: Float\n         $head: Int\n         $weight: Float\n         $price: Float\n         $quantity: Float\n         $year: Int\n         $description: String\n         $isCollateral: Boolean\n         $unitTypeId: UUID\n         $isRemoved: Boolean\n         $startDate: DateOnly\n         $removedDate: DateOnly\n         $historyDate: DateOnly\n      ) {\n         asset: asset_CreateUpdate(\n            historyDate: $historyDate\n            asset: {\n               id: $id\n               assetCategoryId: $assetCategoryId\n               assetCategory: $assetCategory\n               entityId: $entityId\n               amount: $amount\n               head: $head\n               weight: $weight\n               price: $price\n               quantity: $quantity\n               description: $description\n               year: $year\n               isCollateral: $isCollateral\n               unitTypeId: $unitTypeId\n               acres: $acres\n               isRemoved: $isRemoved\n               startDate: $startDate\n               removedDate: $removedDate\n            }\n         ) {\n            ...assetInfo\n         }\n      }\n      ${ASSET_FRAGMENT}\n   `,\n   typeKey: 'asset.type',\n};\n\nexport const ASSET_DELETE = {\n   mutation: gql`\n      mutation assetDelete($id: UUID!) {\n         asset_Delete(assetId: $id)\n      }\n   `,\n   typeKey: 'asset.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const ASSET_CATEGORY_QUERY = gql`\n   query getAssetsCategories {\n      assetCategories: assetCategory_All {\n         id\n         name\n         term\n      }\n   }\n`;\n\nexport const UNIT_TYPE_QUERY = gql`\n   query getUnitTypes {\n      unitList: unitType_All {\n         id\n         name\n      }\n   }\n`;\n\n// Create or update a file with the given properties.\nexport const UNIT_TYPE_CREATE_UPDATE = {\n   mutation: gql`\n      mutation UnitTypeCreate($id: UUID!, $name: String) {\n         unitType: unitType_CreateUpdate(unitType: {id: $id, name: $name}) {\n            ...unitTypeInfo\n         }\n      }\n      ${UNIT_TYPE_FRAGMENT}\n   `,\n   typeKey: 'unitType.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\nexport const getUnitTypeCacheQueries = () => {\n   return [{query: UNIT_TYPE_QUERY}];\n};\n\n//Liabilities\nexport const LIABILITIES_ENTITY_QUERY = gql`\n   query getLiabilitiesAllWhere($entityId: [UUID], $historyDate: DateOnly) {\n      liabilities: liability_AllWhere(liabilitySearch: {entityId: $entityId}, historyDate: $historyDate) {\n         ...liabilityInfo\n      }\n   }\n   ${LIABILITY_FRAGMENT}\n`;\n\nexport const LIABILITY_QUERY = gql`\n   query getLiabilityById($liabilityId: UUID!, $historyDate: DateOnly) {\n      liability: liability_ById(liabilityId: $liabilityId, historyDate: $historyDate) {\n         ...liabilityInfo\n      }\n   }\n   ${LIABILITY_FRAGMENT}\n`;\n\nexport const getLiabilityRefetchQueries = (entityId, liabilityId, historyDate) => {\n   return [\n      {query: LIABILITIES_ENTITY_QUERY, variables: {entityId, historyDate}, queryPath: 'liabilities'},\n      {query: LIABILITY_QUERY, variables: {liabilityId, historyDate}, queryPath: 'liability'},\n      {query: LIABILITY_TYPE_QUERY},\n      {query: BANK_QUERY},\n   ];\n};\n\nexport const LIABILITY_CREATE_UPDATE = {\n   mutation: gql`\n      mutation liabilityCreateUpdate(\n         $id: UUID!\n         $liabilityCategoryId: UUID\n         $liabilityCategory: String\n         $entityId: UUID\n         $amount: Float\n         $description: String\n         $isCollateral: Boolean\n         $date: DateOnly\n         $interestRate: Float\n         $note: String\n         $bank: String\n         $bankId: UUID\n         $payment: Float\n         $paymentDueDate: String\n         $isRemoved: Boolean\n         $startDate: DateOnly\n         $removedDate: DateOnly\n         $historyDate: DateOnly\n      ) {\n         liability: liability_CreateUpdate(\n            liability: {\n               id: $id\n               liabilityCategoryId: $liabilityCategoryId\n               liabilityCategory: $liabilityCategory\n               entityId: $entityId\n               amount: $amount\n               description: $description\n               isCollateral: $isCollateral\n               date: $date\n               interestRate: $interestRate\n               note: $note\n               bankId: $bankId\n               bank: $bank\n               payment: $payment\n               paymentDueDate: $paymentDueDate\n               isRemoved: $isRemoved\n               startDate: $startDate\n               removedDate: $removedDate\n            }\n            historyDate: $historyDate\n         ) {\n            ...liabilityInfo\n         }\n      }\n      ${LIABILITY_FRAGMENT}\n   `,\n   typeKey: 'liability.type',\n};\n\nexport const LIABILITY_DELETE = {\n   mutation: gql`\n      mutation liabilityDelete($id: UUID!) {\n         liability_Delete(liabilityId: $id)\n      }\n   `,\n   typeKey: 'liability.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const LIABILITY_CATEGORY_QUERY = gql`\n   query getLiabilitiesCategories {\n      liabilityCategories: liabilityCategory_All {\n         id\n         name\n      }\n   }\n`;\n\nexport const LIABILITY_TYPE_QUERY = gql`\n   query getLiabilitiesTypes {\n      liabilityTypes: liabilityType_All {\n         id\n         name\n      }\n   }\n`;\n\nexport const BANK_QUERY = gql`\n   query getBanks {\n      banks: bank_All {\n         id\n         name\n      }\n   }\n`;\n\n// Income\nexport const INCOME_QUERY = gql`\n   query getIncomeAllWhere($entityId: [UUID], $firstDate: [DateOnly], $lastDate: [DateOnly]) {\n      income: income_AllWhere(incomeSearch: {entityId: $entityId, firstDate: $firstDate, lastDate: $lastDate}) {\n         ...incomeInfo\n      }\n   }\n   ${INCOME_FRAGMENT}\n`;\n\nexport const INCOME_CREATE_UPDATE = {\n   mutation: gql`\n      mutation incomeCreateUpdate(\n         $entityId: UUID!\n         $incomeTypeId: UUID!\n         $description: String\n         $date: DateOnly!\n         $noteActual: String\n         $noteExpected: String\n         $expected: Float\n         $actual: Float\n      ) {\n         income: income_CreateUpdate(\n            income: {\n               entityId: $entityId\n               incomeTypeId: $incomeTypeId\n               description: $description\n               date: $date\n               noteActual: $noteActual\n               noteExpected: $noteExpected\n               expected: $expected\n               actual: $actual\n            }\n         ) {\n            ...incomeInfo\n         }\n      }\n      ${INCOME_FRAGMENT}\n   `,\n   typeKey: 'income.type',\n};\n\nexport const INCOME_DELETE = {\n   mutation: gql`\n      mutation incomeDelete($id: UUID!) {\n         income_Delete(incomeId: $id)\n      }\n   `,\n   typeKey: 'income.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const getIncomeUpdateQueries = () => {\n   return [\n      // {query: INCOME_TYPE_QUERY},\n      // {query: INCOME_QUERY, variables: {entityId, firstDate, lastDate}, queryPath: 'income'},\n   ];\n};\n\n// Create or update an income type.\nexport const INCOME_TYPE_CREATE_UPDATE = {\n   mutation: gql`\n      mutation IncomeTypeCreateUpdate($id: UUID!, $name: String, $entityId: UUID) {\n         incomeType: incomeType_CreateUpdate(incomeType: {id: $id, name: $name, entityId: $entityId}) {\n            ...incomeTypeInfo\n         }\n      }\n      ${INCOME_TYPE_FRAGMENT}\n   `,\n   typeKey: 'incomeType.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\nexport const INCOME_TYPE_DELETE = {\n   mutation: gql`\n      mutation incomeTypeDelete($id: UUID!) {\n         incomeType_Delete(incomeTypeId: $id)\n      }\n   `,\n   typeKey: 'incomeType.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const INCOME_TYPE_UNDELETE = {\n   mutation: gql`\n      mutation incomeTypeUndelete($id: UUID!) {\n         incomeType_UnDelete(incomeTypeId: $id)\n      }\n   `,\n   typeKey: 'incomeType.type',\n   actionKey: UNDELETE_ACTION,\n};\n\nexport const getIncomeTypeUpdateQueries = () => {\n   return [\n      // {query: INCOME_TYPE_QUERY, queryPath: 'incomeTypes',},\n   ];\n};\n\n// Expense\nexport const EXPENSE_TYPE_QUERY = gql`\n   query getExpenseTypeAll {\n      expenseTypes: expenseType_All {\n         ...expenseTypeInfo\n      }\n   }\n   ${EXPENSE_TYPE_FRAGMENT}\n`;\n\nexport const EXPENSE_CREATE_UPDATE = {\n   mutation: gql`\n      mutation expenseCreateUpdate(\n         $entityId: UUID!\n         $expenseTypeId: UUID!\n         $description: String\n         $date: DateOnly!\n         $noteActual: String\n         $noteExpected: String\n         $expected: Float\n         $actual: Float\n      ) {\n         expense: expense_CreateUpdate(\n            expense: {\n               entityId: $entityId\n               expenseTypeId: $expenseTypeId\n               description: $description\n               date: $date\n               noteActual: $noteActual\n               noteExpected: $noteExpected\n               expected: $expected\n               actual: $actual\n            }\n         ) {\n            ...expenseInfo\n         }\n      }\n      ${EXPENSE_FRAGMENT}\n   `,\n   typeKey: 'expense.type',\n};\n\nexport const EXPENSE_DELETE = {\n   mutation: gql`\n      mutation expenseDelete($id: UUID!) {\n         expense_Delete(expenseId: $id)\n      }\n   `,\n   typeKey: 'expense.type',\n   actionKey: DELETE_ACTION,\n};\n\n// Create or update an expense type.\nexport const EXPENSE_TYPE_CREATE_UPDATE = {\n   mutation: gql`\n      mutation ExpenseTypeCreateUpdate($id: UUID!, $name: String, $entityId: UUID) {\n         expenseType: expenseType_CreateUpdate(expenseType: {id: $id, name: $name, entityId: $entityId}) {\n            ...expenseTypeInfo\n         }\n      }\n      ${EXPENSE_TYPE_FRAGMENT}\n   `,\n   typeKey: 'expenseType.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\nexport const EXPENSE_TYPE_DELETE = {\n   mutation: gql`\n      mutation expenseTypeDelete($id: UUID!) {\n         expenseType_Delete(expenseTypeId: $id)\n      }\n   `,\n   typeKey: 'expenseType.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const EXPENSE_TYPE_UNDELETE = {\n   mutation: gql`\n      mutation expenseTypeUndelete($id: UUID!) {\n         expenseType_UnDelete(expenseTypeId: $id)\n      }\n   `,\n   typeKey: 'expenseType.type',\n   actionKey: UNDELETE_ACTION,\n};\n\nexport const getExpenseUpdateQueries = () => {\n   return [\n      // {query: EXPENSE_QUERY, variables: {entityId, firstDate, lastDate}, queryPath: 'expenses'},\n   ];\n};\n\nexport const getExpenseTypeUpdateQueries = () => {\n   return [\n      // {query: EXPENSE_TYPE_QUERY, variables: {entityId}, queryPath: 'expenseTypes'},\n   ];\n};\n\nexport const BALANCE_SHEET_QUERY = gql`\n   query getBalanceReportQuery($date: DateOnly, $entityId: [UUID]) {\n      balanceSheet: balanceReport(date: $date, entityId: $entityId) {\n         ...balanceReportInfo\n      }\n   }\n   ${BALANCE_REPORT_FRAGMENT}\n`;\n\nexport const LOAN_ANALYSIS_QUERY = gql`\n   query getLoanAnalysisQuery($date: DateOnly, $entityId: [UUID]) {\n      loanAnalysis: loanAnalysis(date: $date, entityId: $entityId) {\n         ...loanAnalysisInfo\n      }\n   }\n   ${LOAN_ANALYSIS_FRAGMENT}\n`;\n\nexport const CASH_FLOW_QUERY = gql`\n   query getCashFlowQuery($year: Int, $entityId: [UUID]) {\n      cashFlow: cashFlowReport(year: $year, entityId: $entityId) {\n         ...cashFlowInfo\n      }\n   }\n   ${CASH_FLOW_FRAGMENT}\n`;\n\nexport const ENTITY_CASH_FLOW_ALL_WHERE_QUERY = gql`\n   query getEntityCashFlowAllWhere($entityId: [UUID], $year: [Int]) {\n      entityCashFlow: entityCashFlow_AllWhere(entityCashFlowSearch: {entityId: $entityId, year: $year}) {\n         ...entityCashFlowInfo\n      }\n   }\n   ${ENTITY_CASH_FLOW_FRAGMENT}\n`;\n\n// const ENTITY_CASH_FLOW_ = gql`\n//    mutation entityCashFlow($: String, $: String, $: String, $: String, $: String)\n//    {\n//       entityCashFlow: entityCashFlow_(entityCashFlow: {: $, : $, : $, : $, : $}) {\n//          ...entityCashFlow\n//       }\n//    }\n//    ${ENTITY_CASH_FLOW_FRAGMENT}\n// `;\n\nexport const ENTITY_CASH_FLOW_CREATE_UPDATE = {\n   mutation: gql`\n      mutation entityCashFlowCreateUpdate(\n         $id: UUID!\n         $year: Int!\n         $entityId: UUID!\n         $actualOperatingLoanBalance: Float\n         $expectedOperatingLoanBalance: Float\n         $targetIncome: Float\n         $operatingLoanLimit: Float\n      ) {\n         entityCashFlow: entityCashFlow_CreateUpdate(\n            entityCashFlow: {\n               id: $id\n               year: $year\n               entityId: $entityId\n               actualOperatingLoanBalance: $actualOperatingLoanBalance\n               expectedOperatingLoanBalance: $expectedOperatingLoanBalance\n               targetIncome: $targetIncome\n               operatingLoanLimit: $operatingLoanLimit\n            }\n         ) {\n            ...entityCashFlowInfo\n         }\n      }\n      ${ENTITY_CASH_FLOW_FRAGMENT}\n   `,\n   typeKey: 'cashFlow.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\nexport const getCashFlowReportRefetchQueries = (entityId, year) => () => {\n   return [{query: CASH_FLOW_QUERY, variables: {entityId, year}, queryPath: 'entityCashFlow'}];\n};\n\nexport const SEAT_ALL_WHERE_QUERY = gql`\n   query getSeatAllWhere($id: [UUID], $clientId: [UUID]) {\n      seats: seat_AllWhere(seatSearch: {id: $id, clientId: $clientId}) {\n         ...seatInfo\n      }\n   }\n   ${SEAT_FRAGMENT}\n`;\n\nexport const SEAT_BY_ID_QUERY = gql`\n   query getSeatById($seatId: UUID!) {\n      seat: seat_ById(seatId: $seatId) {\n         ...seatInfo\n      }\n   }\n   ${SEAT_FRAGMENT}\n`;\nexport const SEAT_DELETE = {\n   mutation: gql`\n      mutation seatDelete($id: UUID!) {\n         seat_Delete(seatId: $id)\n      }\n   `,\n   typeKey: 'accountability.type',\n   actionKey: DELETE_ACTION,\n};\n\nexport const SEAT_CREATE_UPDATE = {\n   mutation: gql`\n      mutation seatCreateUpdate(\n         $id: UUID!\n         $clientId: UUID\n         $userIdList: [UUID]\n         $seatId: UUID\n         $name: String\n         $order: Int\n         $responsibilities: [String]\n      ) {\n         seat: seat_CreateUpdate(\n            seat: {\n               id: $id\n               clientId: $clientId\n               userIdList: $userIdList\n               seatId: $seatId\n               name: $name\n               order: $order\n               responsibilities: $responsibilities\n            }\n         ) {\n            ...seatInfo\n         }\n      }\n      ${SEAT_FRAGMENT}\n   `,\n   typeKey: 'accountability.type',\n   actionKey: CREATE_UPDATE_ACTION,\n};\n\nexport const getSeatCacheQueries = (clientId) => {\n   return [{query: SEAT_ALL_WHERE_QUERY, variables: {clientId}, queryPath: 'seats'}];\n};\n","import PropTypes from 'prop-types';\nimport {useMemo} from 'react';\nimport {useIntl} from 'react-intl';\nimport {formatMessage} from '../utils/Utils';\n\nuseMessage.propTypes = {\n   id: PropTypes.string.isRequired,    // The id of the localized message.\n   defaultMessage: PropTypes.string,   // The default message if not localized.\n   values: PropTypes.array,            // Values to insert in the localized message.\n};\n\nexport default function useMessage(id, defaultMessage, values) {\n   const intl = useIntl();\n\n   return useMemo(() => {\n      return formatMessage(intl, id, defaultMessage, values);\n   }, [id, intl, defaultMessage, values]);\n}\n","import {ThemeProvider as MuiThemeProvider} from '@material-ui/core/styles'\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\nimport responsiveFontSizes from '@material-ui/core/styles/responsiveFontSizes';\nimport React from 'react';\nimport {ERROR_COLOR, WARNING_COLOR, SUCCESS_COLOR, PRIMARY_COLOR} from '../Constants';\n\nexport default function ThemeProvider({children}) {\n\n   let useTheme = React.useMemo(\n      () => {\n         let materialTheme;\n\n         materialTheme = {\n            overrides: {\n               MuiButton: {\n                  textSizeLarge: {\n                     fontSize: '1rem',\n                  },\n               },\n            },\n            palette: {\n               primary: {\n                  light: '#85AC5B',\n                  main: PRIMARY_COLOR,\n                  dark: '#527928',\n               },\n               secondary: {\n                  main: '#000000',\n               },\n               background: {\n                  default: '#F4F4F4',\n               },\n               text: {\n                  primary: '#707070',\n                  secondary: '#527928',\n               },\n               table: {\n                  header: {\n                     primary: '#FFFFFF',\n                     secondary: '#F0F5EA',\n                     // secondary: 'rgba(223,235,209,0.41)',\n                  },\n               },\n               error: {\n                  main: ERROR_COLOR,\n               },\n               warning: {\n                  main: WARNING_COLOR,\n               },\n               success: {\n                  main: SUCCESS_COLOR,\n               }\n            },\n            typography: {\n               fontFamily: '\"Tahoma\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n               subtitle1: {\n                  fontSize: '1.125rem',\n               },\n               button: {\n                  textTransform: 'none',\n               }\n            },\n            shape: {\n               borderRadius: 4,\n            }\n         };\n         return responsiveFontSizes(createMuiTheme(materialTheme));\n      },\n      []);\n\n   return (\n      <MuiThemeProvider theme={useTheme}>\n         {children}\n      </MuiThemeProvider>\n   );\n}\n","import Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {useRecoilValue} from 'recoil';\nimport {progressState} from '../hooks/useProgress';\nimport {progressGlobal} from '../hooks/useProgress';\n\nconst useStyles = makeStyles({\n   backdropStyle: {\n      zIndex: 4000,\n      color: '#fff',\n      opacity: '0.2 !important',\n   },\n   progressStyle: {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      zIndex: 5000,\n   },\n}, {name: 'progressIndicatorStyles'});\n\nProgressIndicator.propTypes = {\n   hasBackdrop: PropTypes.bool,              // Indicates if the backdrop should display.\n}\n\n/**\n * Component to show the progress spinner.\n */\nexport default function ProgressIndicator({hasBackdrop = false, isGlobal}) {\n   const classes = useStyles();\n    const useGlobal= useRecoilValue(progressGlobal);\n    const isInProgress = useRecoilValue(progressState);\n\n   if (isInProgress && useGlobal === isGlobal) {\n      if (hasBackdrop) {\n         return <>\n            <CircularProgress className={classes.progressStyle}/>\n            <Backdrop className={classes.backdropStyle} open={true}/>\n         </>\n      } else {\n         return <CircularProgress className={classes.progressStyle}/>;\n      }\n   } else {\n      return null;\n   }\n}\n","import {useLazyQuery} from '@apollo/client';\nimport uniqueId from 'lodash/uniqueId';\nimport {useCallback} from 'react';\nimport {useRef} from 'react';\nimport {useSetRecoilState} from 'recoil';\nimport {errorState} from '../../../pages/Main';\nimport {useEffect} from 'react';\nimport useMessage from '../useMessage';\nimport useProgress from '../useProgress';\n\nexport default function useLazyQueryFHG(query, options, typeKey, showLoading) {\n   const theUniqueId = useRef(uniqueId()).current;\n   const [, /*Unused*/ setProgress] = useProgress(theUniqueId);\n   const type = useMessage(typeKey, 'Unknown');\n\n   const setErrorState = useSetRecoilState(errorState);\n\n   const [queryFunction, result] = useLazyQuery(query, options);\n   const resolveRef = useRef();\n\n   useEffect(() => {\n      if ((result.called || result.data) && !result.loading && resolveRef.current) {\n         resolveRef.current(result);\n         resolveRef.current = undefined;\n      }\n   }, [result]);\n\n   useEffect(() => {\n      return () => {\n         setProgress(false);\n      };\n   }, [setProgress]);\n\n   useEffect(() => {\n      if (showLoading) {\n         setProgress(result?.loading);\n      }\n   }, [result?.loading, setProgress, showLoading]);\n\n   useEffect(() => {\n      if (result.error) {\n         console.log('Error type', typeKey);\n         console.log(result.error, result.error.stackTrace);\n         setErrorState({error: result.error, errorKey: 'load.error', values: {type, message: result.error.message}});\n      }\n   }, [result?.error, setErrorState, typeKey, type]);\n\n   const localQueryFunction = useCallback(\n      async (variables, context) => {\n         await queryFunction(variables, context);\n\n         return new Promise((resolve) => {\n            resolveRef.current = resolve;\n         });\n      },\n      [queryFunction]\n   );\n\n   return [localQueryFunction, result];\n}\n","import Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Typography from './Typography';\n\nconst useStyles = makeStyles(theme => ({\n   errorMessage: {\n      backgroundColor: `${theme.palette.error.light} !important`,\n      paddingRight: theme.spacing(6),\n   },\n   closeButtonStyle: {\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      marginLeft: 'auto',\n      zIndex: 1001,\n   },\n}), {name: 'ErrorSnackbarStyles'});\n\n\nErrorSnackbar.propTypes = {\n   open: PropTypes.bool,\n   enableRefresh: PropTypes.bool,\n   onClose: PropTypes.func,\n   messageKey: PropTypes.string,\n   message: PropTypes.string,\n   values: PropTypes.object,\n};\n\n/**\n * Component to show the error messages.\n *\n * Note:\n *    Message is the default property in values.\n *\n * Reviewed:\n *\n * @param open Indicates if the Error snackbar should be shown to the user.\n * @param onClose Callback when the snackbar is closed.\n * @param messageKey Intl ID for the error message.\n * @param values Value object for the error message.\n * @param message Text for the error message.\n * @param enableRefresh Indicates if the Refresh action should be shown / enabled.\n * @param error The error that occurred.\n * @param errorInfo The errorInfo for the error that occurred.\n * @return {JSX.Element}\n * @constructor\n */\nexport default function ErrorSnackbar({open=true, onClose, messageKey, values, message, enableRefresh = true, error, errorInfo}) {\n   const classes = useStyles();\n\n   /**\n    * Force a browser reload.\n    */\n   const handleRefresh = () => {\n      window.location.reload();\n   };\n\n   return (\n      <Snackbar\n         open={open}\n         anchorOrigin={{vertical: 'top', horizontal: 'center'}}\n         ContentProps={{\n            'aria-describedby': 'message-id',\n            classes: {\n               root: classes.errorMessage,\n            }\n         }}\n         message={<>\n            <Typography id={messageKey} values={values} color={'inherit'}>{message}</Typography>\n            {(error || errorInfo) && (\n               <details style={{whiteSpace: 'pre-wrap', outline: 'none', outlineColor: 'transparent'}}>\n                  {error && error.toString()}\n                  <br/>\n                  {errorInfo.componentStack}\n               </details>\n            )}\n         </>}\n         action={[\n            enableRefresh && <Button key='undo' color='inherit' size='small' onClick={handleRefresh}>\n               <Typography color='inherit' id='refresh'>Refresh</Typography>\n            </Button>,\n            onClose && (\n               <IconButton\n                  key='close'\n                  aria-label='Close'\n                  color='inherit'\n                  className={classes.closeButtonStyle}\n                  onClick={onClose}\n               >\n                  <CloseIcon/>\n               </IconButton>\n            ),\n         ]}\n      />\n   );\n};\n","import React, {Component} from 'react';\nimport ErrorSnackbar from '../fhg/components/ErrorSnackbar';\n\nexport default class ErrorBoundary extends Component {\n   constructor(props) {\n      super(props);\n      this.state = { open: false, error: null, errorInfo: null };\n   }\n\n   componentDidCatch(error, errorInfo) {\n      this.setState({error, errorInfo});\n      console.log('Error occurred', error, errorInfo);\n   }\n\n   /**\n    * On close close the snackbar.\n    */\n   handleClose = () => {\n      this.setState({open: false, errorInfo: undefined, error: undefined});\n   };\n\n   render() {\n      const {error, errorInfo, open} = this.state;\n\n      if (errorInfo) {\n         return (\n            <ErrorSnackbar open={open} error={error} messageKey={error.messageKey} message={error.message} errorInfo={errorInfo} onClose={this.handleClose}/>\n         );\n      }\n      return this.props.children;\n   }\n}\n","import {Heading} from '@aws-amplify/ui-react';\nimport {Image} from '@aws-amplify/ui-react';\nimport {useTheme} from '@aws-amplify/ui-react';\nimport {Text} from '@aws-amplify/ui-react';\nimport {View} from '@aws-amplify/ui-react';\nimport {Authenticator} from '@aws-amplify/ui-react';\nimport {I18n} from 'aws-amplify';\nimport './Authenticator.css';\nimport {AmplifyProvider} from '@aws-amplify/ui-react';\nimport {LOGO_MEDIUM} from '../../../Constants';\n\nI18n.putVocabulariesForLanguage('en', {\n   Username: 'Enter your username', // Username label\n   Password: 'Enter your password', // Password label\n});\n\nconst defaultComponents = {\n   Header() {\n      const {tokens} = useTheme();\n\n      return (\n         <View\n            textAlign='center'\n            style={{marginLeft: 'auto', marginRight: 'auto', backgroundColor: 'white'}}\n            padding={tokens.space.large}\n            className={'amplify-view'}\n            width={'100%'}\n            height={'100%'}\n         >\n            <Image\n               alt='logo'\n               src={LOGO_MEDIUM}\n               width={{small: '80.5px', large: '161px'}}\n               height={{small: '99.5px', large: '199px'}}\n            />\n            <Heading color={'#828282'} padding={`${tokens.space.xl} 0 0 ${tokens.space.xl}`} level={3}>\n               Sign In to Legacy Farmer\n            </Heading>\n         </View>\n      );\n   },\n\n   Footer() {\n      const {tokens} = useTheme();\n\n      return (\n         <View textAlign='center' padding={tokens.space.large} style={{backgroundColor: 'white'}}>\n            <Text color={`${tokens.colors.neutral['80']}`}>&copy; All Rights Reserved</Text>\n         </View>\n      );\n   },\n};\n\n/**\n * Authenticator for the app. The children won't be displayed until the user has logged in.\n *\n * @param theme The theme for the AWS authentication.\n * @param components The components for the AWS authentication.\n * @param children\n * @return {JSX.Element}\n * @constructor\n */\nexport default function AuthenticatorFHG({theme, components = defaultComponents, children}) {\n   return (\n      <AmplifyProvider theme={theme}>\n         <Authenticator components={components} style={{backgroundColor: 'lightblue'}}>\n            {children}\n         </Authenticator>\n      </AmplifyProvider>\n   );\n}\n","const awsmobile = {\n   \"aws_project_region\": \"us-east-2\",\n   \"aws_cognito_identity_pool_id\": \"us-east-2:dc738c6b-0b94-49eb-9692-00e0f7efeba9\",\n   \"aws_cognito_region\": \"us-east-2\",\n   \"aws_user_pools_id\": \"us-east-2_vtSyFarm8\",\n   \"aws_user_pools_web_client_id\": \"7j1503q96p2n8l08vlq7ervaff\"\n}\nexport default awsmobile;\n","import {PRIMARY_COLOR} from '../../Constants';\n\nexport const authenticatorTheme = {\n   name: 'my-theme',\n   tokens: {\n      colors: {\n         font: {\n            primary: {value: PRIMARY_COLOR},\n         },\n      },\n      components: {\n         button: {\n            // this will affect the font weight of all button variants\n            fontWeight: {value: '{fontWeights.black.value}'},\n            // style the primary variation\n            primary: {\n               backgroundColor: {value: PRIMARY_COLOR},\n               _hover: {\n                  backgroundColor: {value: '#527928'},\n               },\n            },\n            _hover: {\n               backgroundColor: {value: 'rgba(223,235,209,0.35)'},\n            },\n            _focus: {\n               backgroundColor: {value: 'rgba(223,235,209,0.35)'},\n            },\n            _active: {\n               backgroundColor: {value: 'rgba(223,235,209,0.35)'},\n            },\n         },\n      },\n   },\n};\n","import '@aws-amplify/ui-react/styles.css';\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport StylesProvider from '@material-ui/styles/StylesProvider';\nimport React, {useState, Suspense} from 'react';\nimport {IntlProvider} from 'react-intl';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport ThemeProvider from './components/ThemeProvider';\nimport {FILE_BUCKET} from './Constants';\nimport Loading from './fhg/components/Loading';\nimport AuthenticatedUser from './fhg/components/security/AuthenticatedUser';\nimport AuthenticatorFHG from './fhg/components/security/Authenticator';\nimport {useEffect} from 'react';\nimport Main from './pages/Main';\nimport Amplify from 'aws-amplify';\nimport awsconfig from './aws-exports';\nimport awsProductionConfig from './aws-production-exports';\nimport {authenticatorTheme} from './components/theme/authenticatorTheme';\n\nimport makeStyles from '@material-ui/core/styles/makeStyles';\n\nconst useStyles = makeStyles(\n   {\n      frameStyle: {\n         height: `100vh`,\n         overflow: 'hidden',\n         backgroundColor: '#FAFAFA',\n         '& > div': {\n            height: '100%',\n         },\n      },\n   },\n   {name: 'AppStyles'}\n);\n\nconst config = process.env.REACT_APP_POOL === 'production' ? awsProductionConfig : awsconfig;\nAmplify.configure(config);\nAmplify.configure({\n   Storage: {\n      bucket: FILE_BUCKET, //REQUIRED -  Amazon S3 bucket\n      region: 'us-east-2',\n      customPrefix: {\n         public: '',\n         protected: '',\n         private: '',\n      },\n   },\n   Analytics: {\n      // OPTIONAL - disable Analytics if true\n      disabled: true,\n   },\n});\n\nconst formats = {\n   number: {\n      USD: {\n         style: 'currency',\n         currency: 'USD',\n      },\n   },\n};\n\n/**\n * App component. Responsible for initializing AWS, GraphQL and Intl (localization). App can be displayed without\n * authorization. Main is displayed when authorized.\n *\n * @return {JSX.Element|null}\n * @constructor\n */\nexport default function App() {\n   const classes = useStyles();\n   const [messages, setMessages] = useState({});\n\n   useEffect(() => {\n      import('./messages/en-US').then((messages) => {\n         setMessages(messages.default);\n      });\n   }, []);\n\n   if (Object.keys(messages).length > 0) {\n      return (\n         <Suspense fallback={<Loading isLoading />}>\n            <ErrorBoundary>\n               <IntlProvider messages={messages} locale={'en'} formats={formats}>\n                  <StylesProvider>\n                     <ThemeProvider>\n                        <div className={classes.frameStyle}>\n                           <AuthenticatorFHG theme={authenticatorTheme}>\n                              {(authState) => (\n                                 <AuthenticatedUser authState={authState}>\n                                    <CssBaseline />\n                                    <Main />\n                                 </AuthenticatedUser>\n                              )}\n                           </AuthenticatorFHG>\n                        </div>\n                     </ThemeProvider>\n                  </StylesProvider>\n               </IntlProvider>\n            </ErrorBoundary>\n         </Suspense>\n      );\n   } else {\n      return null;\n   }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ApolloProvider, InMemoryCache, ApolloLink, HttpLink} from '@apollo/client';\nimport React from 'react';\nimport {DndProvider} from 'react-dnd';\nimport {HTML5Backend} from 'react-dnd-html5-backend';\nimport {ApolloClient} from '@apollo/client';\nimport {setContext} from 'apollo-link-context';\nimport {RetryLink} from '@apollo/client/link/retry';\n\nimport {Auth} from 'aws-amplify';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport {RecoilRoot} from 'recoil';\nimport App from './App';\nimport {ENDPOINT} from './Constants';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n/*\nAuth: {\n         // REQUIRED - Amazon Cognito Identity Pool ID\n         identityPoolId: 'us-east-2:fc2ef06e-cf67-4b73-9da8-090e59828afe',\n         // REQUIRED - Amazon Cognito Region\n         region: 'us-east-2',\n         // OPTIONAL - Amazon Cognito User Pool ID\n         userPoolId: 'us-east-2_juU9d1lC5',\n         // OPTIONAL - Amazon Cognito Web Client ID\n         userPoolWebClientId: '730rts1ddvhja0k0nv09hvthm2',\n},\n */\n\nconst retryLink = new RetryLink();\n\nconst getAccessToken = () => {\n   return Auth.currentSession()\n      .then((session) => {\n         return session.accessToken.jwtToken;\n      })\n      .catch((error) => {\n         console.log(error);\n         throw error;\n      });\n};\n\nconst authLink = setContext(async (_, {headers}) => {\n   let token = await getAccessToken();\n\n   return {\n      headers: {\n         ...headers,\n         accesstoken: token || '',\n      },\n   };\n});\n\nconst client = new ApolloClient({\n   link: ApolloLink.from([retryLink, authLink, new HttpLink({uri: ENDPOINT})]),\n   cache: new InMemoryCache(),\n});\n// Add the format command for adding parameters to strings. For Example:\n//    'This is a test: {testName}'.format({testName: 'Test Hello World'})\nif (!String.prototype.format) {\n   // eslint-disable-next-line\n   String.prototype.format = function (values) {\n      return this.replace(/{(\\w+)}/g, function (match, key) {\n         return typeof values[key] !== 'undefined' ? values[key] : match;\n      });\n   };\n}\n// function handleFirstTab(e) {\n//    if (e.keyCode === 9) { // the \"I am a keyboard user\" key\n//       document.body.classList.add('user-is-tabbing');\n//       // window.removeEventListener('keydown', handleFirstTab);\n//    }\n// }\n// window.addEventListener('keydown', handleFirstTab);\n\nReactDOM.render(\n   <DndProvider backend={HTML5Backend}>\n      <RecoilRoot>\n         <ApolloProvider client={client}>\n            <BrowserRouter>\n               <App />\n            </BrowserRouter>\n         </ApolloProvider>\n      </RecoilRoot>\n   </DndProvider>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}